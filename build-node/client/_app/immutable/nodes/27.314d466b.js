import{S as ze,i as Ce,s as Me,k as It,l as Pt,m as Ft,h as bt,n as Xt,b as Se,G as Ut,H as _t,o as Ae}from"../chunks/index.137f5445.js";import{S as Be,T as Ne,e as Te,b as Rt,i as Ie,f as qt,A as Pe,D as Fe,P as _e,W as Re,L as qe,v as Le,B as je,h as Oe,c as We,C as ke}from"../chunks/three.module.c2ac7129.js";import{O as Ve}from"../chunks/OrbitControls.e9bb9833.js";import{G as Ge}from"../chunks/lil-gui.esm.5b862306.js";class Z{constructor(t){t===void 0&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){t===void 0&&(t=new c);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){e===void 0&&(e=new c);const s=this.elements,n=t.x,i=t.y,o=t.z;return e.x=s[0]*n+s[1]*i+s[2]*o,e.y=s[3]*n+s[4]*i+s[5]*o,e.z=s[6]*n+s[7]*i+s[8]*o,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){e===void 0&&(e=new Z);const s=this.elements,n=t.elements,i=e.elements,o=s[0],r=s[1],a=s[2],l=s[3],d=s[4],u=s[5],h=s[6],f=s[7],p=s[8],y=n[0],v=n[1],w=n[2],m=n[3],g=n[4],b=n[5],E=n[6],C=n[7],A=n[8];return i[0]=o*y+r*m+a*E,i[1]=o*v+r*g+a*C,i[2]=o*w+r*b+a*A,i[3]=l*y+d*m+u*E,i[4]=l*v+d*g+u*C,i[5]=l*w+d*b+u*A,i[6]=h*y+f*m+p*E,i[7]=h*v+f*g+p*C,i[8]=h*w+f*b+p*A,e}scale(t,e){e===void 0&&(e=new Z);const s=this.elements,n=e.elements;for(let i=0;i!==3;i++)n[3*i+0]=t.x*s[3*i+0],n[3*i+1]=t.y*s[3*i+1],n[3*i+2]=t.z*s[3*i+2];return e}solve(t,e){e===void 0&&(e=new c);const s=3,n=4,i=[];let o,r;for(o=0;o<s*n;o++)i.push(0);for(o=0;o<3;o++)for(r=0;r<3;r++)i[o+n*r]=this.elements[o+3*r];i[3+4*0]=t.x,i[3+4*1]=t.y,i[3+4*2]=t.z;let a=3;const l=a;let d;const u=4;let h;do{if(o=l-a,i[o+n*o]===0){for(r=o+1;r<l;r++)if(i[o+n*r]!==0){d=u;do h=u-d,i[h+n*o]+=i[h+n*r];while(--d);break}}if(i[o+n*o]!==0)for(r=o+1;r<l;r++){const f=i[o+n*r]/i[o+n*o];d=u;do h=u-d,i[h+n*r]=h<=o?0:i[h+n*r]-i[h+n*o]*f;while(--d)}}while(--a);if(e.z=i[2*n+3]/i[2*n+2],e.y=(i[1*n+3]-i[1*n+2]*e.z)/i[1*n+1],e.x=(i[0*n+3]-i[0*n+2]*e.z-i[0*n+1]*e.y)/i[0*n+0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw`Could not solve equation! Got x=[${e.toString()}], b=[${t.toString()}], A=[${this.toString()}]`;return e}e(t,e,s){if(s===void 0)return this.elements[e+3*t];this.elements[e+3*t]=s}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";const e=",";for(let s=0;s<9;s++)t+=this.elements[s]+e;return t}reverse(t){t===void 0&&(t=new Z);const e=3,s=6,n=He;let i,o;for(i=0;i<3;i++)for(o=0;o<3;o++)n[i+s*o]=this.elements[i+3*o];n[3+6*0]=1,n[3+6*1]=0,n[3+6*2]=0,n[4+6*0]=0,n[4+6*1]=1,n[4+6*2]=0,n[5+6*0]=0,n[5+6*1]=0,n[5+6*2]=1;let r=3;const a=r;let l;const d=s;let u;do{if(i=a-r,n[i+s*i]===0){for(o=i+1;o<a;o++)if(n[i+s*o]!==0){l=d;do u=d-l,n[u+s*i]+=n[u+s*o];while(--l);break}}if(n[i+s*i]!==0)for(o=i+1;o<a;o++){const h=n[i+s*o]/n[i+s*i];l=d;do u=d-l,n[u+s*o]=u<=i?0:n[u+s*o]-n[u+s*i]*h;while(--l)}}while(--r);i=2;do{o=i-1;do{const h=n[i+s*o]/n[i+s*i];l=s;do u=s-l,n[u+s*o]=n[u+s*o]-n[u+s*i]*h;while(--l)}while(o--)}while(--i);i=2;do{const h=1/n[i+s*i];l=s;do u=s-l,n[u+s*i]=n[u+s*i]*h;while(--l)}while(i--);i=2;do{o=2;do{if(u=n[e+o+s*i],isNaN(u)||u===1/0)throw`Could not reverse! A=[${this.toString()}]`;t.e(i,o,u)}while(o--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,s=t.y,n=t.z,i=t.w,o=e+e,r=s+s,a=n+n,l=e*o,d=e*r,u=e*a,h=s*r,f=s*a,p=n*a,y=i*o,v=i*r,w=i*a,m=this.elements;return m[3*0+0]=1-(h+p),m[3*0+1]=d-w,m[3*0+2]=u+v,m[3*1+0]=d+w,m[3*1+1]=1-(l+p),m[3*1+2]=f-y,m[3*2+0]=u-v,m[3*2+1]=f+y,m[3*2+2]=1-(l+h),this}transpose(t){t===void 0&&(t=new Z);const e=this.elements,s=t.elements;let n;return s[0]=e[0],s[4]=e[4],s[8]=e[8],n=e[1],s[1]=e[3],s[3]=n,n=e[2],s[2]=e[6],s[6]=n,n=e[5],s[5]=e[7],s[7]=n,t}}const He=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class c{constructor(t,e,s){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),this.x=t,this.y=e,this.z=s}cross(t,e){e===void 0&&(e=new c);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,a=this.z;return e.x=r*i-a*n,e.y=a*s-o*i,e.z=o*n-r*s,e}set(t,e,s){return this.x=t,this.y=e,this.z=s,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(e)e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z;else return new c(this.x+t.x,this.y+t.y,this.z+t.z)}vsub(t,e){if(e)e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z;else return new c(this.x-t.x,this.y-t.y,this.z-t.z)}crossmat(){return new Z([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,s=this.z,n=Math.sqrt(t*t+e*e+s*s);if(n>0){const i=1/n;this.x*=i,this.y*=i,this.z*=i}else this.x=0,this.y=0,this.z=0;return n}unit(t){t===void 0&&(t=new c);const e=this.x,s=this.y,n=this.z;let i=Math.sqrt(e*e+s*s+n*n);return i>0?(i=1/i,t.x=e*i,t.y=s*i,t.z=n*i):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,s=this.z;return Math.sqrt(t*t+e*e+s*s)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return Math.sqrt((i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n))}distanceSquared(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,r=t.z;return(i-e)*(i-e)+(o-s)*(o-s)+(r-n)*(r-n)}scale(t,e){e===void 0&&(e=new c);const s=this.x,n=this.y,i=this.z;return e.x=t*s,e.y=t*n,e.z=t*i,e}vmul(t,e){return e===void 0&&(e=new c),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,s){return s===void 0&&(s=new c),s.x=this.x+t*e.x,s.y=this.y+t*e.y,s.z=this.z+t*e.z,s}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return this.x===0&&this.y===0&&this.z===0}negate(t){return t===void 0&&(t=new c),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const s=this.length();if(s>0){const n=De,i=1/s;n.set(this.x*i,this.y*i,this.z*i);const o=Ye;Math.abs(n.x)<.9?(o.set(1,0,0),n.cross(o,t)):(o.set(0,1,0),n.cross(o,t)),n.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return`${this.x},${this.y},${this.z}`}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,s){const n=this.x,i=this.y,o=this.z;s.x=n+(t.x-n)*e,s.y=i+(t.y-i)*e,s.z=o+(t.z-o)*e}almostEquals(t,e){return e===void 0&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return t===void 0&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate($t),$t.almostEquals(t,e)}clone(){return new c(this.x,this.y,this.z)}}c.ZERO=new c(0,0,0);c.UNIT_X=new c(1,0,0);c.UNIT_Y=new c(0,1,0);c.UNIT_Z=new c(0,0,1);const De=new c,Ye=new c,$t=new c;class U{constructor(t){t===void 0&&(t={}),this.lowerBound=new c,this.upperBound=new c,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,s,n){const i=this.lowerBound,o=this.upperBound,r=s;i.copy(t[0]),r&&r.vmult(i,i),o.copy(i);for(let a=1;a<t.length;a++){let l=t[a];r&&(r.vmult(l,Zt),l=Zt),l.x>o.x&&(o.x=l.x),l.x<i.x&&(i.x=l.x),l.y>o.y&&(o.y=l.y),l.y<i.y&&(i.y=l.y),l.z>o.z&&(o.z=l.z),l.z<i.z&&(i.z=l.z)}return e&&(e.vadd(i,i),e.vadd(o,o)),n&&(i.x-=n,i.y-=n,i.z-=n,o.x+=n,o.y+=n,o.z+=n),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return new U().copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound,o=n.x<=s.x&&s.x<=i.x||e.x<=i.x&&i.x<=s.x,r=n.y<=s.y&&s.y<=i.y||e.y<=i.y&&i.y<=s.y,a=n.z<=s.z&&s.z<=i.z||e.z<=i.z&&i.z<=s.z;return o&&r&&a}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,s=this.upperBound,n=t.lowerBound,i=t.upperBound;return e.x<=n.x&&s.x>=i.x&&e.y<=n.y&&s.y>=i.y&&e.z<=n.z&&s.z>=i.z}getCorners(t,e,s,n,i,o,r,a){const l=this.lowerBound,d=this.upperBound;t.copy(l),e.set(d.x,l.y,l.z),s.set(d.x,d.y,l.z),n.set(l.x,d.y,d.z),i.set(d.x,l.y,d.z),o.set(l.x,d.y,l.z),r.set(l.x,l.y,d.z),a.copy(d)}toLocalFrame(t,e){const s=Kt,n=s[0],i=s[1],o=s[2],r=s[3],a=s[4],l=s[5],d=s[6],u=s[7];this.getCorners(n,i,o,r,a,l,d,u);for(let h=0;h!==8;h++){const f=s[h];t.pointToLocal(f,f)}return e.setFromPoints(s)}toWorldFrame(t,e){const s=Kt,n=s[0],i=s[1],o=s[2],r=s[3],a=s[4],l=s[5],d=s[6],u=s[7];this.getCorners(n,i,o,r,a,l,d,u);for(let h=0;h!==8;h++){const f=s[h];t.pointToWorld(f,f)}return e.setFromPoints(s)}overlapsRay(t){const{direction:e,from:s}=t,n=1/e.x,i=1/e.y,o=1/e.z,r=(this.lowerBound.x-s.x)*n,a=(this.upperBound.x-s.x)*n,l=(this.lowerBound.y-s.y)*i,d=(this.upperBound.y-s.y)*i,u=(this.lowerBound.z-s.z)*o,h=(this.upperBound.z-s.z)*o,f=Math.max(Math.max(Math.min(r,a),Math.min(l,d)),Math.min(u,h)),p=Math.min(Math.min(Math.max(r,a),Math.max(l,d)),Math.max(u,h));return!(p<0||f>p)}}const Zt=new c,Kt=[new c,new c,new c,new c,new c,new c,new c,new c];class Jt{constructor(){this.matrix=[]}get(t,e){let{index:s}=t,{index:n}=e;if(n>s){const i=n;n=s,s=i}return this.matrix[(s*(s+1)>>1)+n-1]}set(t,e,s){let{index:n}=t,{index:i}=e;if(i>n){const o=i;i=n,n=o}this.matrix[(n*(n+1)>>1)+i-1]=s?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class fe{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const s=this._listeners;return s[t]===void 0&&(s[t]=[]),s[t].includes(e)||s[t].push(e),this}hasEventListener(t,e){if(this._listeners===void 0)return!1;const s=this._listeners;return!!(s[t]!==void 0&&s[t].includes(e))}hasAnyEventListener(t){return this._listeners===void 0?!1:this._listeners[t]!==void 0}removeEventListener(t,e){if(this._listeners===void 0)return this;const s=this._listeners;if(s[t]===void 0)return this;const n=s[t].indexOf(e);return n!==-1&&s[t].splice(n,1),this}dispatchEvent(t){if(this._listeners===void 0)return this;const s=this._listeners[t.type];if(s!==void 0){t.target=this;for(let n=0,i=s.length;n<i;n++)s[n].call(this,t)}return this}}class H{constructor(t,e,s,n){t===void 0&&(t=0),e===void 0&&(e=0),s===void 0&&(s=0),n===void 0&&(n=1),this.x=t,this.y=e,this.z=s,this.w=n}set(t,e,s,n){return this.x=t,this.y=e,this.z=s,this.w=n,this}toString(){return`${this.x},${this.y},${this.z},${this.w}`}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const s=Math.sin(e*.5);return this.x=t.x*s,this.y=t.y*s,this.z=t.z*s,this.w=Math.cos(e*.5),this}toAxisAngle(t){t===void 0&&(t=new c),this.normalize();const e=2*Math.acos(this.w),s=Math.sqrt(1-this.w*this.w);return s<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/s,t.y=this.y/s,t.z=this.z/s),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const s=Xe,n=Ue;t.tangents(s,n),this.setFromAxisAngle(s,Math.PI)}else{const s=t.cross(e);this.x=s.x,this.y=s.y,this.z=s.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){e===void 0&&(e=new H);const s=this.x,n=this.y,i=this.z,o=this.w,r=t.x,a=t.y,l=t.z,d=t.w;return e.x=s*d+o*r+n*l-i*a,e.y=n*d+o*a+i*r-s*l,e.z=i*d+o*l+s*a-n*r,e.w=o*d-s*r-n*a-i*l,e}inverse(t){t===void 0&&(t=new H);const e=this.x,s=this.y,n=this.z,i=this.w;this.conjugate(t);const o=1/(e*e+s*s+n*n+i*i);return t.x*=o,t.y*=o,t.z*=o,t.w*=o,t}conjugate(t){return t===void 0&&(t=new H),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return t===0?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){e===void 0&&(e=new c);const s=t.x,n=t.y,i=t.z,o=this.x,r=this.y,a=this.z,l=this.w,d=l*s+r*i-a*n,u=l*n+a*s-o*i,h=l*i+o*n-r*s,f=-o*s-r*n-a*i;return e.x=d*l+f*-o+u*-a-h*-r,e.y=u*l+f*-r+h*-o-d*-a,e.z=h*l+f*-a+d*-r-u*-o,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){e===void 0&&(e="YZX");let s,n,i;const o=this.x,r=this.y,a=this.z,l=this.w;switch(e){case"YZX":const d=o*r+a*l;if(d>.499&&(s=2*Math.atan2(o,l),n=Math.PI/2,i=0),d<-.499&&(s=-2*Math.atan2(o,l),n=-Math.PI/2,i=0),s===void 0){const u=o*o,h=r*r,f=a*a;s=Math.atan2(2*r*l-2*o*a,1-2*h-2*f),n=Math.asin(2*d),i=Math.atan2(2*o*l-2*r*a,1-2*u-2*f)}break;default:throw new Error(`Euler order ${e} not supported yet.`)}t.y=s,t.z=n,t.x=i}setFromEuler(t,e,s,n){n===void 0&&(n="XYZ");const i=Math.cos(t/2),o=Math.cos(e/2),r=Math.cos(s/2),a=Math.sin(t/2),l=Math.sin(e/2),d=Math.sin(s/2);return n==="XYZ"?(this.x=a*o*r+i*l*d,this.y=i*l*r-a*o*d,this.z=i*o*d+a*l*r,this.w=i*o*r-a*l*d):n==="YXZ"?(this.x=a*o*r+i*l*d,this.y=i*l*r-a*o*d,this.z=i*o*d-a*l*r,this.w=i*o*r+a*l*d):n==="ZXY"?(this.x=a*o*r-i*l*d,this.y=i*l*r+a*o*d,this.z=i*o*d+a*l*r,this.w=i*o*r-a*l*d):n==="ZYX"?(this.x=a*o*r-i*l*d,this.y=i*l*r+a*o*d,this.z=i*o*d-a*l*r,this.w=i*o*r+a*l*d):n==="YZX"?(this.x=a*o*r+i*l*d,this.y=i*l*r+a*o*d,this.z=i*o*d-a*l*r,this.w=i*o*r-a*l*d):n==="XZY"&&(this.x=a*o*r-i*l*d,this.y=i*l*r-a*o*d,this.z=i*o*d+a*l*r,this.w=i*o*r+a*l*d),this}clone(){return new H(this.x,this.y,this.z,this.w)}slerp(t,e,s){s===void 0&&(s=new H);const n=this.x,i=this.y,o=this.z,r=this.w;let a=t.x,l=t.y,d=t.z,u=t.w,h,f,p,y,v;return f=n*a+i*l+o*d+r*u,f<0&&(f=-f,a=-a,l=-l,d=-d,u=-u),1-f>1e-6?(h=Math.acos(f),p=Math.sin(h),y=Math.sin((1-e)*h)/p,v=Math.sin(e*h)/p):(y=1-e,v=e),s.x=y*n+v*a,s.y=y*i+v*l,s.z=y*o+v*d,s.w=y*r+v*u,s}integrate(t,e,s,n){n===void 0&&(n=new H);const i=t.x*s.x,o=t.y*s.y,r=t.z*s.z,a=this.x,l=this.y,d=this.z,u=this.w,h=e*.5;return n.x+=h*(i*u+o*d-r*l),n.y+=h*(o*u+r*a-i*d),n.z+=h*(r*u+i*l-o*a),n.w+=h*(-i*a-o*l-r*d),n}}const Xe=new c,Ue=new c,$e={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class B{constructor(t){t===void 0&&(t={}),this.id=B.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=t.collisionResponse?t.collisionResponse:!0,this.collisionFilterGroup=t.collisionFilterGroup!==void 0?t.collisionFilterGroup:1,this.collisionFilterMask=t.collisionFilterMask!==void 0?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw`computeBoundingSphereRadius() not implemented for shape type ${this.type}`}volume(){throw`volume() not implemented for shape type ${this.type}`}calculateLocalInertia(t,e){throw`calculateLocalInertia() not implemented for shape type ${this.type}`}calculateWorldAABB(t,e,s,n){throw`calculateWorldAABB() not implemented for shape type ${this.type}`}}B.idCounter=0;B.types=$e;class W{constructor(t){t===void 0&&(t={}),this.position=new c,this.quaternion=new H,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return W.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return W.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return e===void 0&&(e=new c),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,s,n){return n===void 0&&(n=new c),s.vsub(t,n),e.conjugate(Qt),Qt.vmult(n,n),n}static pointToWorldFrame(t,e,s,n){return n===void 0&&(n=new c),e.vmult(s,n),n.vadd(t,n),n}static vectorToWorldFrame(t,e,s){return s===void 0&&(s=new c),t.vmult(e,s),s}static vectorToLocalFrame(t,e,s,n){return n===void 0&&(n=new c),e.w*=-1,e.vmult(s,n),e.w*=-1,n}}const Qt=new H;class yt extends B{constructor(t){t===void 0&&(t={});const{vertices:e=[],faces:s=[],normals:n=[],axes:i,boundingSphereRadius:o}=t;super({type:B.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=s,this.faceNormals=n,this.faceNormals.length===0&&this.computeNormals(),o?this.boundingSphereRadius=o:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=i?i.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,s=this.uniqueEdges;s.length=0;const n=new c;for(let i=0;i!==t.length;i++){const o=t[i],r=o.length;for(let a=0;a!==r;a++){const l=(a+1)%r;e[o[a]].vsub(e[o[l]],n),n.normalize();let d=!1;for(let u=0;u!==s.length;u++)if(s[u].almostEquals(n)||s[u].almostEquals(n)){d=!0;break}d||s.push(n.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let n=0;n<this.faces[t].length;n++)if(!this.vertices[this.faces[t][n]])throw new Error(`Vertex ${this.faces[t][n]} not found!`);const e=this.faceNormals[t]||new c;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const s=this.vertices[this.faces[t][0]];if(e.dot(s)<0){console.error(`.faceNormals[${t}] = Vec3(${e.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);for(let n=0;n<this.faces[t].length;n++)console.warn(`.vertices[${this.faces[t][n]}] = Vec3(${this.vertices[this.faces[t][n]].toString()})`)}}}getFaceNormal(t,e){const s=this.faces[t],n=this.vertices[s[0]],i=this.vertices[s[1]],o=this.vertices[s[2]];yt.computeNormal(n,i,o,e)}static computeNormal(t,e,s,n){const i=new c,o=new c;e.vsub(t,o),s.vsub(e,i),i.cross(o,n),n.isZero()||n.normalize()}clipAgainstHull(t,e,s,n,i,o,r,a,l){const d=new c;let u=-1,h=-Number.MAX_VALUE;for(let p=0;p<s.faces.length;p++){d.copy(s.faceNormals[p]),i.vmult(d,d);const y=d.dot(o);y>h&&(h=y,u=p)}const f=[];for(let p=0;p<s.faces[u].length;p++){const y=s.vertices[s.faces[u][p]],v=new c;v.copy(y),i.vmult(v,v),n.vadd(v,v),f.push(v)}u>=0&&this.clipFaceAgainstHull(o,t,e,f,r,a,l)}findSeparatingAxis(t,e,s,n,i,o,r,a){const l=new c,d=new c,u=new c,h=new c,f=new c,p=new c;let y=Number.MAX_VALUE;const v=this;if(v.uniqueAxes)for(let w=0;w!==v.uniqueAxes.length;w++){s.vmult(v.uniqueAxes[w],l);const m=v.testSepAxis(l,t,e,s,n,i);if(m===!1)return!1;m<y&&(y=m,o.copy(l))}else{const w=r?r.length:v.faces.length;for(let m=0;m<w;m++){const g=r?r[m]:m;l.copy(v.faceNormals[g]),s.vmult(l,l);const b=v.testSepAxis(l,t,e,s,n,i);if(b===!1)return!1;b<y&&(y=b,o.copy(l))}}if(t.uniqueAxes)for(let w=0;w!==t.uniqueAxes.length;w++){i.vmult(t.uniqueAxes[w],d);const m=v.testSepAxis(d,t,e,s,n,i);if(m===!1)return!1;m<y&&(y=m,o.copy(d))}else{const w=a?a.length:t.faces.length;for(let m=0;m<w;m++){const g=a?a[m]:m;d.copy(t.faceNormals[g]),i.vmult(d,d);const b=v.testSepAxis(d,t,e,s,n,i);if(b===!1)return!1;b<y&&(y=b,o.copy(d))}}for(let w=0;w!==v.uniqueEdges.length;w++){s.vmult(v.uniqueEdges[w],h);for(let m=0;m!==t.uniqueEdges.length;m++)if(i.vmult(t.uniqueEdges[m],f),h.cross(f,p),!p.almostZero()){p.normalize();const g=v.testSepAxis(p,t,e,s,n,i);if(g===!1)return!1;g<y&&(y=g,o.copy(p))}}return n.vsub(e,u),u.dot(o)>0&&o.negate(o),!0}testSepAxis(t,e,s,n,i,o){const r=this;yt.project(r,t,s,n,Lt),yt.project(e,t,i,o,jt);const a=Lt[0],l=Lt[1],d=jt[0],u=jt[1];if(a<u||d<l)return!1;const h=a-u,f=d-l;return h<f?h:f}calculateLocalInertia(t,e){const s=new c,n=new c;this.computeLocalAABB(n,s);const i=s.x-n.x,o=s.y-n.y,r=s.z-n.z;e.x=1/12*t*(2*o*2*o+2*r*2*r),e.y=1/12*t*(2*i*2*i+2*r*2*r),e.z=1/12*t*(2*o*2*o+2*i*2*i)}getPlaneConstantOfFace(t){const e=this.faces[t],s=this.faceNormals[t],n=this.vertices[e[0]];return-s.dot(n)}clipFaceAgainstHull(t,e,s,n,i,o,r){const a=new c,l=new c,d=new c,u=new c,h=new c,f=new c,p=new c,y=new c,v=this,w=[],m=n,g=w;let b=-1,E=Number.MAX_VALUE;for(let T=0;T<v.faces.length;T++){a.copy(v.faceNormals[T]),s.vmult(a,a);const _=a.dot(t);_<E&&(E=_,b=T)}if(b<0)return;const C=v.faces[b];C.connectedFaces=[];for(let T=0;T<v.faces.length;T++)for(let _=0;_<v.faces[T].length;_++)C.indexOf(v.faces[T][_])!==-1&&T!==b&&C.connectedFaces.indexOf(T)===-1&&C.connectedFaces.push(T);const A=C.length;for(let T=0;T<A;T++){const _=v.vertices[C[T]],L=v.vertices[C[(T+1)%A]];_.vsub(L,l),d.copy(l),s.vmult(d,d),e.vadd(d,d),u.copy(this.faceNormals[b]),s.vmult(u,u),e.vadd(u,u),d.cross(u,h),h.negate(h),f.copy(_),s.vmult(f,f),e.vadd(f,f);const z=C.connectedFaces[T];p.copy(this.faceNormals[z]);const S=this.getPlaneConstantOfFace(z);y.copy(p),s.vmult(y,y);const M=S-y.dot(e);for(this.clipFaceAgainstPlane(m,g,y,M);m.length;)m.shift();for(;g.length;)m.push(g.shift())}p.copy(this.faceNormals[b]);const I=this.getPlaneConstantOfFace(b);y.copy(p),s.vmult(y,y);const R=I-y.dot(e);for(let T=0;T<m.length;T++){let _=y.dot(m[T])+R;if(_<=i&&(console.log(`clamped: depth=${_} to minDist=${i}`),_=i),_<=o){const L=m[T];if(_<=1e-6){const z={point:L,normal:y,depth:_};r.push(z)}}}}clipFaceAgainstPlane(t,e,s,n){let i,o;const r=t.length;if(r<2)return e;let a=t[t.length-1],l=t[0];i=s.dot(a)+n;for(let d=0;d<r;d++){if(l=t[d],o=s.dot(l)+n,i<0)if(o<0){const u=new c;u.copy(l),e.push(u)}else{const u=new c;a.lerp(l,i/(i-o),u),e.push(u)}else if(o<0){const u=new c;a.lerp(l,i/(i-o),u),e.push(u),e.push(l)}a=l,i=o}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new c);const s=this.vertices,n=this.worldVertices;for(let i=0;i!==this.vertices.length;i++)e.vmult(s[i],n[i]),t.vadd(n[i],n[i]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const s=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let n=0;n<this.vertices.length;n++){const i=s[n];i.x<t.x?t.x=i.x:i.x>e.x&&(e.x=i.x),i.y<t.y?t.y=i.y:i.y>e.y&&(e.y=i.y),i.z<t.z?t.z=i.z:i.z>e.z&&(e.z=i.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new c);const s=this.faceNormals,n=this.worldFaceNormals;for(let i=0;i!==e;i++)t.vmult(s[i],n[i]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let s=0;s!==e.length;s++){const n=e[s].lengthSquared();n>t&&(t=n)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,s,n){const i=this.vertices;let o,r,a,l,d,u,h=new c;for(let f=0;f<i.length;f++){h.copy(i[f]),e.vmult(h,h),t.vadd(h,h);const p=h;(o===void 0||p.x<o)&&(o=p.x),(l===void 0||p.x>l)&&(l=p.x),(r===void 0||p.y<r)&&(r=p.y),(d===void 0||p.y>d)&&(d=p.y),(a===void 0||p.z<a)&&(a=p.z),(u===void 0||p.z>u)&&(u=p.z)}s.set(o,r,a),n.set(l,d,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){t===void 0&&(t=new c);const e=this.vertices;for(let s=0;s<e.length;s++)t.vadd(e[s],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const s=this.vertices.length,n=this.vertices;if(e){for(let i=0;i<s;i++){const o=n[i];e.vmult(o,o)}for(let i=0;i<this.faceNormals.length;i++){const o=this.faceNormals[i];e.vmult(o,o)}}if(t)for(let i=0;i<s;i++){const o=n[i];o.vadd(t,o)}}pointIsInside(t){const e=this.vertices,s=this.faces,n=this.faceNormals,i=null,o=new c;this.getAveragePointLocal(o);for(let r=0;r<this.faces.length;r++){let a=n[r];const l=e[s[r][0]],d=new c;t.vsub(l,d);const u=a.dot(d),h=new c;o.vsub(l,h);const f=a.dot(h);if(u<0&&f>0||u>0&&f<0)return!1}return i?1:-1}static project(t,e,s,n,i){const o=t.vertices.length,r=Ze;let a=0,l=0;const d=Ke,u=t.vertices;d.setZero(),W.vectorToLocalFrame(s,n,e,r),W.pointToLocalFrame(s,n,d,d);const h=d.dot(r);l=a=u[0].dot(r);for(let f=1;f<o;f++){const p=u[f].dot(r);p>a&&(a=p),p<l&&(l=p)}if(l-=h,a-=h,l>a){const f=l;l=a,a=f}i[0]=a,i[1]=l}}const Lt=[],jt=[];new c;const Ze=new c,Ke=new c;class Bt extends B{constructor(t){super({type:B.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,s=this.halfExtents.z,n=c,i=[new n(-t,-e,-s),new n(t,-e,-s),new n(t,e,-s),new n(-t,e,-s),new n(-t,-e,s),new n(t,-e,s),new n(t,e,s),new n(-t,e,s)],o=[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],r=[new n(0,0,1),new n(0,1,0),new n(1,0,0)],a=new yt({vertices:i,faces:o,axes:r});this.convexPolyhedronRepresentation=a,a.material=this.material}calculateLocalInertia(t,e){return e===void 0&&(e=new c),Bt.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,s){const n=t;s.x=1/12*e*(2*n.y*2*n.y+2*n.z*2*n.z),s.y=1/12*e*(2*n.x*2*n.x+2*n.z*2*n.z),s.z=1/12*e*(2*n.y*2*n.y+2*n.x*2*n.x)}getSideNormals(t,e){const s=t,n=this.halfExtents;if(s[0].set(n.x,0,0),s[1].set(0,n.y,0),s[2].set(0,0,n.z),s[3].set(-n.x,0,0),s[4].set(0,-n.y,0),s[5].set(0,0,-n.z),e!==void 0)for(let i=0;i!==s.length;i++)e.vmult(s[i],s[i]);return s}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,s){const n=this.halfExtents,i=[[n.x,n.y,n.z],[-n.x,n.y,n.z],[-n.x,-n.y,n.z],[-n.x,-n.y,-n.z],[n.x,-n.y,-n.z],[n.x,n.y,-n.z],[-n.x,n.y,-n.z],[n.x,-n.y,n.z]];for(let o=0;o<i.length;o++)ot.set(i[o][0],i[o][1],i[o][2]),e.vmult(ot,ot),t.vadd(ot,ot),s(ot.x,ot.y,ot.z)}calculateWorldAABB(t,e,s,n){const i=this.halfExtents;K[0].set(i.x,i.y,i.z),K[1].set(-i.x,i.y,i.z),K[2].set(-i.x,-i.y,i.z),K[3].set(-i.x,-i.y,-i.z),K[4].set(i.x,-i.y,-i.z),K[5].set(i.x,i.y,-i.z),K[6].set(-i.x,i.y,-i.z),K[7].set(i.x,-i.y,i.z);const o=K[0];e.vmult(o,o),t.vadd(o,o),n.copy(o),s.copy(o);for(let r=1;r<8;r++){const a=K[r];e.vmult(a,a),t.vadd(a,a);const l=a.x,d=a.y,u=a.z;l>n.x&&(n.x=l),d>n.y&&(n.y=d),u>n.z&&(n.z=u),l<s.x&&(s.x=l),d<s.y&&(s.y=d),u<s.z&&(s.z=u)}}}const ot=new c,K=[new c,new c,new c,new c,new c,new c,new c,new c],Gt={DYNAMIC:1,STATIC:2,KINEMATIC:4},Ht={AWAKE:0,SLEEPY:1,SLEEPING:2};class N extends fe{constructor(t){t===void 0&&(t={}),super(),this.id=N.idCounter++,this.index=-1,this.world=null,this.vlambda=new c,this.collisionFilterGroup=typeof t.collisionFilterGroup=="number"?t.collisionFilterGroup:1,this.collisionFilterMask=typeof t.collisionFilterMask=="number"?t.collisionFilterMask:-1,this.collisionResponse=typeof t.collisionResponse=="boolean"?t.collisionResponse:!0,this.position=new c,this.previousPosition=new c,this.interpolatedPosition=new c,this.initPosition=new c,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new c,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new c,this.force=new c;const e=typeof t.mass=="number"?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping=typeof t.linearDamping=="number"?t.linearDamping:.01,this.type=e<=0?N.STATIC:N.DYNAMIC,typeof t.type==typeof N.STATIC&&(this.type=t.type),this.allowSleep=typeof t.allowSleep<"u"?t.allowSleep:!0,this.sleepState=N.AWAKE,this.sleepSpeedLimit=typeof t.sleepSpeedLimit<"u"?t.sleepSpeedLimit:.1,this.sleepTimeLimit=typeof t.sleepTimeLimit<"u"?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new c,this.quaternion=new H,this.initQuaternion=new H,this.previousQuaternion=new H,this.interpolatedQuaternion=new H,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new c,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new c,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new c,this.invInertia=new c,this.invInertiaWorld=new Z,this.invMassSolve=0,this.invInertiaSolve=new c,this.invInertiaWorldSolve=new Z,this.fixedRotation=typeof t.fixedRotation<"u"?t.fixedRotation:!1,this.angularDamping=typeof t.angularDamping<"u"?t.angularDamping:.01,this.linearFactor=new c(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new c(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new U,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new c,this.isTrigger=!!t.isTrigger,t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=N.AWAKE,this.wakeUpAfterNarrowphase=!1,t===N.SLEEPING&&this.dispatchEvent(N.wakeupEvent)}sleep(){this.sleepState=N.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,s=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),n=this.sleepSpeedLimit**2;e===N.AWAKE&&s<n?(this.sleepState=N.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(N.sleepyEvent)):e===N.SLEEPY&&s>n?this.wakeUp():e===N.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(N.sleepEvent))}}updateSolveMassProperties(){this.sleepState===N.SLEEPING||this.type===N.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return e===void 0&&(e=new c),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return e===void 0&&(e=new c),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return e===void 0&&(e=new c),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return e===void 0&&(e=new c),this.quaternion.vmult(t,e),e}addShape(t,e,s){const n=new c,i=new H;return e&&n.copy(e),s&&i.copy(s),this.shapes.push(t),this.shapeOffsets.push(n),this.shapeOrientations.push(i),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return e===-1?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,s=t.length;let n=0;for(let i=0;i!==s;i++){const o=t[i];o.updateBoundingSphereRadius();const r=e[i].length(),a=o.boundingSphereRadius;r+a>n&&(n=r+a)}this.boundingRadius=n}updateAABB(){const t=this.shapes,e=this.shapeOffsets,s=this.shapeOrientations,n=t.length,i=Je,o=Qe,r=this.quaternion,a=this.aabb,l=ts;for(let d=0;d!==n;d++){const u=t[d];r.vmult(e[d],i),i.vadd(this.position,i),r.mult(s[d],o),u.calculateWorldAABB(i,o,l.lowerBound,l.upperBound),d===0?a.copy(l):a.extend(l)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(!(e.x===e.y&&e.y===e.z&&!t)){const s=es,n=ss;s.setRotationFromQuaternion(this.quaternion),s.transpose(n),s.scale(e,s),s.mmult(n,this.invInertiaWorld)}}applyForce(t,e){if(e===void 0&&(e=new c),this.type!==N.DYNAMIC)return;this.sleepState===N.SLEEPING&&this.wakeUp();const s=is;e.cross(t,s),this.force.vadd(t,this.force),this.torque.vadd(s,this.torque)}applyLocalForce(t,e){if(e===void 0&&(e=new c),this.type!==N.DYNAMIC)return;const s=os,n=rs;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyForce(s,n)}applyTorque(t){this.type===N.DYNAMIC&&(this.sleepState===N.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(e===void 0&&(e=new c),this.type!==N.DYNAMIC)return;this.sleepState===N.SLEEPING&&this.wakeUp();const s=e,n=cs;n.copy(t),n.scale(this.invMass,n),this.velocity.vadd(n,this.velocity);const i=as;s.cross(t,i),this.invInertiaWorld.vmult(i,i),this.angularVelocity.vadd(i,this.angularVelocity)}applyLocalImpulse(t,e){if(e===void 0&&(e=new c),this.type!==N.DYNAMIC)return;const s=ls,n=hs;this.vectorToWorldFrame(t,s),this.vectorToWorldFrame(e,n),this.applyImpulse(s,n)}updateMassProperties(){const t=ds;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,s=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),Bt.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!s?1/e.x:0,e.y>0&&!s?1/e.y:0,e.z>0&&!s?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const s=new c;return t.vsub(this.position,s),this.angularVelocity.cross(s,e),this.velocity.vadd(e,e),e}integrate(t,e,s){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),!(this.type===N.DYNAMIC||this.type===N.KINEMATIC)||this.sleepState===N.SLEEPING)return;const n=this.velocity,i=this.angularVelocity,o=this.position,r=this.force,a=this.torque,l=this.quaternion,d=this.invMass,u=this.invInertiaWorld,h=this.linearFactor,f=d*t;n.x+=r.x*f*h.x,n.y+=r.y*f*h.y,n.z+=r.z*f*h.z;const p=u.elements,y=this.angularFactor,v=a.x*y.x,w=a.y*y.y,m=a.z*y.z;i.x+=t*(p[0]*v+p[1]*w+p[2]*m),i.y+=t*(p[3]*v+p[4]*w+p[5]*m),i.z+=t*(p[6]*v+p[7]*w+p[8]*m),o.x+=n.x*t,o.y+=n.y*t,o.z+=n.z*t,l.integrate(this.angularVelocity,t,this.angularFactor,l),e&&(s?l.normalizeFast():l.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}N.idCounter=0;N.COLLIDE_EVENT_NAME="collide";N.DYNAMIC=Gt.DYNAMIC;N.STATIC=Gt.STATIC;N.KINEMATIC=Gt.KINEMATIC;N.AWAKE=Ht.AWAKE;N.SLEEPY=Ht.SLEEPY;N.SLEEPING=Ht.SLEEPING;N.wakeupEvent={type:"wakeup"};N.sleepyEvent={type:"sleepy"};N.sleepEvent={type:"sleep"};const Je=new c,Qe=new H,ts=new U,es=new Z,ss=new Z,ns=new Z,is=new c,os=new c,rs=new c,cs=new c,as=new c,ls=new c,hs=new c,ds=new c;class me{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,s){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return!(!(t.collisionFilterGroup&e.collisionFilterMask)||!(e.collisionFilterGroup&t.collisionFilterMask)||(t.type&N.STATIC||t.sleepState===N.SLEEPING)&&(e.type&N.STATIC||e.sleepState===N.SLEEPING))}intersectionTest(t,e,s,n){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,s,n):this.doBoundingSphereBroadphase(t,e,s,n)}doBoundingSphereBroadphase(t,e,s,n){const i=us;e.position.vsub(t.position,i);const o=(t.boundingRadius+e.boundingRadius)**2;i.lengthSquared()<o&&(s.push(t),n.push(e))}doBoundingBoxBroadphase(t,e,s,n){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(s.push(t),n.push(e))}makePairsUnique(t,e){const s=ps,n=fs,i=ms,o=t.length;for(let r=0;r!==o;r++)n[r]=t[r],i[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==o;r++){const a=n[r].id,l=i[r].id,d=a<l?`${a},${l}`:`${l},${a}`;s[d]=r,s.keys.push(d)}for(let r=0;r!==s.keys.length;r++){const a=s.keys.pop(),l=s[a];t.push(n[l]),e.push(i[l]),delete s[a]}}setWorld(t){}static boundingSphereCheck(t,e){const s=new c;t.position.vsub(e.position,s);const n=t.shapes[0],i=e.shapes[0];return Math.pow(n.boundingSphereRadius+i.boundingSphereRadius,2)>s.lengthSquared()}aabbQuery(t,e,s){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const us=new c;new c;new H;new c;const ps={keys:[]},fs=[],ms=[];new c;new c;new c;class vs extends me{constructor(){super()}collisionPairs(t,e,s){const n=t.bodies,i=n.length;let o,r;for(let a=0;a!==i;a++)for(let l=0;l!==a;l++)o=n[a],r=n[l],this.needBroadphaseCollision(o,r)&&this.intersectionTest(o,r,e,s)}aabbQuery(t,e,s){s===void 0&&(s=[]);for(let n=0;n<t.bodies.length;n++){const i=t.bodies[n];i.aabbNeedsUpdate&&i.updateAABB(),i.aabb.overlaps(e)&&s.push(i)}return s}}class At{constructor(){this.rayFromWorld=new c,this.rayToWorld=new c,this.hitNormalWorld=new c,this.hitPointWorld=new c,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,s,n,i,o,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(s),this.hitPointWorld.copy(n),this.shape=i,this.body=o,this.distance=r}}let ve,ye,we,xe,ge,be,Ee;const Dt={CLOSEST:1,ANY:2,ALL:4};ve=B.types.SPHERE;ye=B.types.PLANE;we=B.types.BOX;xe=B.types.CYLINDER;ge=B.types.CONVEXPOLYHEDRON;be=B.types.HEIGHTFIELD;Ee=B.types.TRIMESH;class G{get[ve](){return this._intersectSphere}get[ye](){return this._intersectPlane}get[we](){return this._intersectBox}get[xe](){return this._intersectConvex}get[ge](){return this._intersectConvex}get[be](){return this._intersectHeightfield}get[Ee](){return this._intersectTrimesh}constructor(t,e){t===void 0&&(t=new c),e===void 0&&(e=new c),this.from=t.clone(),this.to=e.clone(),this.direction=new c,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=G.ANY,this.result=new At,this.hasHit=!1,this.callback=s=>{}}intersectWorld(t,e){return this.mode=e.mode||G.ANY,this.result=e.result||new At,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask=typeof e.collisionFilterMask<"u"?e.collisionFilterMask:-1,this.collisionFilterGroup=typeof e.collisionFilterGroup<"u"?e.collisionFilterGroup:-1,this.checkCollisionResponse=typeof e.checkCollisionResponse<"u"?e.checkCollisionResponse:!0,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(te),Ot.length=0,t.broadphase.aabbQuery(t,te,Ot),this.intersectBodies(Ot),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const s=this.checkCollisionResponse;if(s&&!t.collisionResponse||!(this.collisionFilterGroup&t.collisionFilterMask)||!(t.collisionFilterGroup&this.collisionFilterMask))return;const n=ys,i=ws;for(let o=0,r=t.shapes.length;o<r;o++){const a=t.shapes[o];if(!(s&&!a.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[o],i),t.quaternion.vmult(t.shapeOffsets[o],n),n.vadd(t.position,n),this.intersectShape(a,i,n,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let s=0,n=t.length;!this.result.shouldStop&&s<n;s++)this.intersectBody(t[s])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,s,n){const i=this.from;if(Ps(i,this.direction,s)>t.boundingSphereRadius)return;const r=this[t.type];r&&r.call(this,t,e,s,n,t)}_intersectBox(t,e,s,n,i){return this._intersectConvex(t.convexPolyhedronRepresentation,e,s,n,i)}_intersectPlane(t,e,s,n,i){const o=this.from,r=this.to,a=this.direction,l=new c(0,0,1);e.vmult(l,l);const d=new c;o.vsub(s,d);const u=d.dot(l);r.vsub(s,d);const h=d.dot(l);if(u*h>0||o.distanceTo(r)<u)return;const f=l.dot(a);if(Math.abs(f)<this.precision)return;const p=new c,y=new c,v=new c;o.vsub(s,p);const w=-l.dot(p)/f;a.scale(w,y),o.vadd(y,v),this.reportIntersection(l,v,i,n,-1)}getAABB(t){const{lowerBound:e,upperBound:s}=t,n=this.to,i=this.from;e.x=Math.min(n.x,i.x),e.y=Math.min(n.y,i.y),e.z=Math.min(n.z,i.z),s.x=Math.max(n.x,i.x),s.y=Math.max(n.y,i.y),s.z=Math.max(n.z,i.z)}_intersectHeightfield(t,e,s,n,i){t.data,t.elementSize;const o=xs;o.from.copy(this.from),o.to.copy(this.to),W.pointToLocalFrame(s,e,o.from,o.from),W.pointToLocalFrame(s,e,o.to,o.to),o.updateDirection();const r=gs;let a,l,d,u;a=l=0,d=u=t.data.length-1;const h=new U;o.getAABB(h),t.getIndexOfPosition(h.lowerBound.x,h.lowerBound.y,r,!0),a=Math.max(a,r[0]),l=Math.max(l,r[1]),t.getIndexOfPosition(h.upperBound.x,h.upperBound.y,r,!0),d=Math.min(d,r[0]+1),u=Math.min(u,r[1]+1);for(let f=a;f<d;f++)for(let p=l;p<u;p++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(f,p,h),!!h.overlapsRay(o)){if(t.getConvexTrianglePillar(f,p,!1),W.pointToWorldFrame(s,e,t.pillarOffset,Et),this._intersectConvex(t.pillarConvex,e,Et,n,i,ee),this.result.shouldStop)return;t.getConvexTrianglePillar(f,p,!0),W.pointToWorldFrame(s,e,t.pillarOffset,Et),this._intersectConvex(t.pillarConvex,e,Et,n,i,ee)}}}_intersectSphere(t,e,s,n,i){const o=this.from,r=this.to,a=t.radius,l=(r.x-o.x)**2+(r.y-o.y)**2+(r.z-o.z)**2,d=2*((r.x-o.x)*(o.x-s.x)+(r.y-o.y)*(o.y-s.y)+(r.z-o.z)*(o.z-s.z)),u=(o.x-s.x)**2+(o.y-s.y)**2+(o.z-s.z)**2-a**2,h=d**2-4*l*u,f=bs,p=Es;if(!(h<0))if(h===0)o.lerp(r,h,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1);else{const y=(-d-Math.sqrt(h))/(2*l),v=(-d+Math.sqrt(h))/(2*l);if(y>=0&&y<=1&&(o.lerp(r,y,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1)),this.result.shouldStop)return;v>=0&&v<=1&&(o.lerp(r,v,f),f.vsub(s,p),p.normalize(),this.reportIntersection(p,f,i,n,-1))}}_intersectConvex(t,e,s,n,i,o){const r=zs,a=se,l=o&&o.faceList||null,d=t.faces,u=t.vertices,h=t.faceNormals,f=this.direction,p=this.from,y=this.to,v=p.distanceTo(y),w=l?l.length:d.length,m=this.result;for(let g=0;!m.shouldStop&&g<w;g++){const b=l?l[g]:g,E=d[b],C=h[b],A=e,I=s;a.copy(u[E[0]]),A.vmult(a,a),a.vadd(I,a),a.vsub(p,a),A.vmult(C,r);const R=f.dot(r);if(Math.abs(R)<this.precision)continue;const T=r.dot(a)/R;if(!(T<0)){f.scale(T,X),X.vadd(p,X),$.copy(u[E[0]]),A.vmult($,$),I.vadd($,$);for(let _=1;!m.shouldStop&&_<E.length-1;_++){J.copy(u[E[_]]),Q.copy(u[E[_+1]]),A.vmult(J,J),A.vmult(Q,Q),I.vadd(J,J),I.vadd(Q,Q);const L=X.distanceTo(p);!(G.pointInTriangle(X,$,J,Q)||G.pointInTriangle(X,J,$,Q))||L>v||this.reportIntersection(r,X,i,n,b)}}}}_intersectTrimesh(t,e,s,n,i,o){const r=Cs,a=Ts,l=Is,d=se,u=Ms,h=Ss,f=As,p=Ns,y=Bs,v=t.indices;t.vertices;const w=this.from,m=this.to,g=this.direction;l.position.copy(s),l.quaternion.copy(e),W.vectorToLocalFrame(s,e,g,u),W.pointToLocalFrame(s,e,w,h),W.pointToLocalFrame(s,e,m,f),f.x*=t.scale.x,f.y*=t.scale.y,f.z*=t.scale.z,h.x*=t.scale.x,h.y*=t.scale.y,h.z*=t.scale.z,f.vsub(h,u),u.normalize();const b=h.distanceSquared(f);t.tree.rayQuery(this,l,a);for(let E=0,C=a.length;!this.result.shouldStop&&E!==C;E++){const A=a[E];t.getNormal(A,r),t.getVertex(v[A*3],$),$.vsub(h,d);const I=u.dot(r),R=r.dot(d)/I;if(R<0)continue;u.scale(R,X),X.vadd(h,X),t.getVertex(v[A*3+1],J),t.getVertex(v[A*3+2],Q);const T=X.distanceSquared(h);!(G.pointInTriangle(X,J,$,Q)||G.pointInTriangle(X,$,J,Q))||T>b||(W.vectorToWorldFrame(e,r,y),W.pointToWorldFrame(s,e,X,p),this.reportIntersection(y,p,i,n,A))}a.length=0}reportIntersection(t,e,s,n,i){const o=this.from,r=this.to,a=o.distanceTo(e),l=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(l.hitFaceIndex=typeof i<"u"?i:-1,this.mode){case G.ALL:this.hasHit=!0,l.set(o,r,t,e,s,n,a),l.hasHit=!0,this.callback(l);break;case G.CLOSEST:(a<l.distance||!l.hasHit)&&(this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,s,n,a));break;case G.ANY:this.hasHit=!0,l.hasHit=!0,l.set(o,r,t,e,s,n,a),l.shouldStop=!0;break}}static pointInTriangle(t,e,s,n){n.vsub(e,ct),s.vsub(e,pt),t.vsub(e,Wt);const i=ct.dot(ct),o=ct.dot(pt),r=ct.dot(Wt),a=pt.dot(pt),l=pt.dot(Wt);let d,u;return(d=a*r-o*l)>=0&&(u=i*l-o*r)>=0&&d+u<i*a-o*o}}G.CLOSEST=Dt.CLOSEST;G.ANY=Dt.ANY;G.ALL=Dt.ALL;const te=new U,Ot=[],pt=new c,Wt=new c,ys=new c,ws=new H,X=new c,$=new c,J=new c,Q=new c;new c;new At;const ee={faceList:[0]},Et=new c,xs=new G,gs=[],bs=new c,Es=new c,zs=new c;new c;new c;const se=new c,Cs=new c,Ms=new c,Ss=new c,As=new c,Bs=new c,Ns=new c;new U;const Ts=[],Is=new W,ct=new c,zt=new c;function Ps(j,t,e){e.vsub(j,ct);const s=ct.dot(t);return t.scale(s,zt),zt.vadd(j,zt),e.distanceTo(zt)}class dt extends me{static checkBounds(t,e,s){let n,i;s===0?(n=t.position.x,i=e.position.x):s===1?(n=t.position.y,i=e.position.y):s===2&&(n=t.position.z,i=e.position.z);const o=t.boundingRadius,r=e.boundingRadius,a=n+o;return i-r<a}static insertionSortX(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.x<=n.aabb.lowerBound.x);i--)t[i+1]=t[i];t[i+1]=n}return t}static insertionSortY(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.y<=n.aabb.lowerBound.y);i--)t[i+1]=t[i];t[i+1]=n}return t}static insertionSortZ(t){for(let e=1,s=t.length;e<s;e++){const n=t[e];let i;for(i=e-1;i>=0&&!(t[i].aabb.lowerBound.z<=n.aabb.lowerBound.z);i--)t[i+1]=t[i];t[i+1]=n}return t}constructor(t){super(),this.axisList=[],this.world=null,this.axisIndex=0;const e=this.axisList;this._addBodyHandler=s=>{e.push(s.body)},this._removeBodyHandler=s=>{const n=e.indexOf(s.body);n!==-1&&e.splice(n,1)},t&&this.setWorld(t)}setWorld(t){this.axisList.length=0;for(let e=0;e<t.bodies.length;e++)this.axisList.push(t.bodies[e]);t.removeEventListener("addBody",this._addBodyHandler),t.removeEventListener("removeBody",this._removeBodyHandler),t.addEventListener("addBody",this._addBodyHandler),t.addEventListener("removeBody",this._removeBodyHandler),this.world=t,this.dirty=!0}collisionPairs(t,e,s){const n=this.axisList,i=n.length,o=this.axisIndex;let r,a;for(this.dirty&&(this.sortList(),this.dirty=!1),r=0;r!==i;r++){const l=n[r];for(a=r+1;a<i;a++){const d=n[a];if(this.needBroadphaseCollision(l,d)){if(!dt.checkBounds(l,d,o))break;this.intersectionTest(l,d,e,s)}}}}sortList(){const t=this.axisList,e=this.axisIndex,s=t.length;for(let n=0;n!==s;n++){const i=t[n];i.aabbNeedsUpdate&&i.updateAABB()}e===0?dt.insertionSortX(t):e===1?dt.insertionSortY(t):e===2&&dt.insertionSortZ(t)}autoDetectAxis(){let t=0,e=0,s=0,n=0,i=0,o=0;const r=this.axisList,a=r.length,l=1/a;for(let f=0;f!==a;f++){const p=r[f],y=p.position.x;t+=y,e+=y*y;const v=p.position.y;s+=v,n+=v*v;const w=p.position.z;i+=w,o+=w*w}const d=e-t*t*l,u=n-s*s*l,h=o-i*i*l;d>u?d>h?this.axisIndex=0:this.axisIndex=2:u>h?this.axisIndex=1:this.axisIndex=2}aabbQuery(t,e,s){s===void 0&&(s=[]),this.dirty&&(this.sortList(),this.dirty=!1);const n=this.axisIndex;let i="x";n===1&&(i="y"),n===2&&(i="z");const o=this.axisList;e.lowerBound[i],e.upperBound[i];for(let r=0;r<o.length;r++){const a=o[r];a.aabbNeedsUpdate&&a.updateAABB(),a.aabb.overlaps(e)&&s.push(a)}return s}}class Fs{static defaults(t,e){t===void 0&&(t={});for(let s in e)s in t||(t[s]=e[s]);return t}}class ne{constructor(){this.spatial=new c,this.rotational=new c}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class wt{constructor(t,e,s,n){s===void 0&&(s=-1e6),n===void 0&&(n=1e6),this.id=wt.idCounter++,this.minForce=s,this.maxForce=n,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new ne,this.jacobianElementB=new ne,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,s){const n=e,i=t,o=s;this.a=4/(o*(1+4*n)),this.b=4*n/(1+4*n),this.eps=4/(o*o*i*(1+4*n))}computeB(t,e,s){const n=this.computeGW(),i=this.computeGq(),o=this.computeGiMf();return-i*t-n*e-o*s}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.position,o=n.position;return t.spatial.dot(i)+e.spatial.dot(o)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.velocity,o=n.velocity,r=s.angularVelocity,a=n.angularVelocity;return t.multiplyVectors(i,r)+e.multiplyVectors(o,a)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.vlambda,o=n.vlambda,r=s.wlambda,a=n.wlambda;return t.multiplyVectors(i,r)+e.multiplyVectors(o,a)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.force,o=s.torque,r=n.force,a=n.torque,l=s.invMassSolve,d=n.invMassSolve;return i.scale(l,ie),r.scale(d,oe),s.invInertiaWorldSolve.vmult(o,re),n.invInertiaWorldSolve.vmult(a,ce),t.multiplyVectors(ie,re)+e.multiplyVectors(oe,ce)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,s=this.bi,n=this.bj,i=s.invMassSolve,o=n.invMassSolve,r=s.invInertiaWorldSolve,a=n.invInertiaWorldSolve;let l=i+o;return r.vmult(t.rotational,Ct),l+=Ct.dot(t.rotational),a.vmult(e.rotational,Ct),l+=Ct.dot(e.rotational),l}addToWlambda(t){const e=this.jacobianElementA,s=this.jacobianElementB,n=this.bi,i=this.bj,o=_s;n.vlambda.addScaledVector(n.invMassSolve*t,e.spatial,n.vlambda),i.vlambda.addScaledVector(i.invMassSolve*t,s.spatial,i.vlambda),n.invInertiaWorldSolve.vmult(e.rotational,o),n.wlambda.addScaledVector(t,o,n.wlambda),i.invInertiaWorldSolve.vmult(s.rotational,o),i.wlambda.addScaledVector(t,o,i.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}wt.idCounter=0;const ie=new c,oe=new c,re=new c,ce=new c,Ct=new c,_s=new c;class Rs extends wt{constructor(t,e,s){s===void 0&&(s=1e6),super(t,e,0,s),this.restitution=0,this.ri=new c,this.rj=new c,this.ni=new c}computeB(t){const e=this.a,s=this.b,n=this.bi,i=this.bj,o=this.ri,r=this.rj,a=qs,l=Ls,d=n.velocity,u=n.angularVelocity;n.force,n.torque;const h=i.velocity,f=i.angularVelocity;i.force,i.torque;const p=js,y=this.jacobianElementA,v=this.jacobianElementB,w=this.ni;o.cross(w,a),r.cross(w,l),w.negate(y.spatial),a.negate(y.rotational),v.spatial.copy(w),v.rotational.copy(l),p.copy(i.position),p.vadd(r,p),p.vsub(n.position,p),p.vsub(o,p);const m=w.dot(p),g=this.restitution+1,b=g*h.dot(w)-g*d.dot(w)+f.dot(l)-u.dot(a),E=this.computeGiMf();return-m*e-b*s-t*E}getImpactVelocityAlongNormal(){const t=Os,e=Ws,s=ks,n=Vs,i=Gs;return this.bi.position.vadd(this.ri,s),this.bj.position.vadd(this.rj,n),this.bi.getVelocityAtWorldPoint(s,t),this.bj.getVelocityAtWorldPoint(n,e),t.vsub(e,i),this.ni.dot(i)}}const qs=new c,Ls=new c,js=new c,Os=new c,Ws=new c,ks=new c,Vs=new c,Gs=new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;class ae extends wt{constructor(t,e,s){super(t,e,-s,s),this.ri=new c,this.rj=new c,this.t=new c}computeB(t){this.a;const e=this.b;this.bi,this.bj;const s=this.ri,n=this.rj,i=Hs,o=Ds,r=this.t;s.cross(r,i),n.cross(r,o);const a=this.jacobianElementA,l=this.jacobianElementB;r.negate(a.spatial),i.negate(a.rotational),l.spatial.copy(r),l.rotational.copy(o);const d=this.computeGW(),u=this.computeGiMf();return-d*e-t*u}}const Hs=new c,Ds=new c;class xt{constructor(t,e,s){s=Fs.defaults(s,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=xt.idCounter++,this.materials=[t,e],this.friction=s.friction,this.restitution=s.restitution,this.contactEquationStiffness=s.contactEquationStiffness,this.contactEquationRelaxation=s.contactEquationRelaxation,this.frictionEquationStiffness=s.frictionEquationStiffness,this.frictionEquationRelaxation=s.frictionEquationRelaxation}}xt.idCounter=0;class ut{constructor(t){t===void 0&&(t={});let e="";typeof t=="string"&&(e=t,t={}),this.name=e,this.id=ut.idCounter++,this.friction=typeof t.friction<"u"?t.friction:-1,this.restitution=typeof t.restitution<"u"?t.restitution:-1}}ut.idCounter=0;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new G;new c;new c;new c;new c(1,0,0),new c(0,1,0),new c(0,0,1);new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;class Ys extends B{constructor(t){if(super({type:B.types.SPHERE}),this.radius=t!==void 0?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e){e===void 0&&(e=new c);const s=2*t*this.radius*this.radius/5;return e.x=s,e.y=s,e.z=s,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,s,n){const i=this.radius,o=["x","y","z"];for(let r=0;r<o.length;r++){const a=o[r];s[a]=t[a]-i,n[a]=t[a]+i}}}new c;new c;new c;new c;new c;new c;new c;new c;new c;class Xs extends B{constructor(){super({type:B.types.PLANE}),this.worldNormal=new c,this.worldNormalNeedsUpdate=!0,this.boundingSphereRadius=Number.MAX_VALUE}computeWorldNormal(t){const e=this.worldNormal;e.set(0,0,1),t.vmult(e,e),this.worldNormalNeedsUpdate=!1}calculateLocalInertia(t,e){return e===void 0&&(e=new c),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,s,n){tt.set(0,0,1),e.vmult(tt,tt);const i=Number.MAX_VALUE;s.set(-i,-i,-i),n.set(i,i,i),tt.x===1?n.x=t.x:tt.x===-1&&(s.x=t.x),tt.y===1?n.y=t.y:tt.y===-1&&(s.y=t.y),tt.z===1?n.z=t.z:tt.z===-1&&(s.z=t.z)}updateBoundingSphereRadius(){this.boundingSphereRadius=Number.MAX_VALUE}}const tt=new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new c;new U;new c;new U;new c;new c;new c;new c;new c;new c;new c;new U;new c;new W;new U;class Us{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){t.enabled&&!t.bi.isTrigger&&!t.bj.isTrigger&&this.equations.push(t)}removeEquation(t){const e=this.equations,s=e.indexOf(t);s!==-1&&e.splice(s,1)}removeAllEquations(){this.equations.length=0}}class $s extends Us{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let s=0;const n=this.iterations,i=this.tolerance*this.tolerance,o=this.equations,r=o.length,a=e.bodies,l=a.length,d=t;let u,h,f,p,y,v;if(r!==0)for(let b=0;b!==l;b++)a[b].updateSolveMassProperties();const w=Ks,m=Js,g=Zs;w.length=r,m.length=r,g.length=r;for(let b=0;b!==r;b++){const E=o[b];g[b]=0,m[b]=E.computeB(d),w[b]=1/E.computeC()}if(r!==0){for(let C=0;C!==l;C++){const A=a[C],I=A.vlambda,R=A.wlambda;I.set(0,0,0),R.set(0,0,0)}for(s=0;s!==n;s++){p=0;for(let C=0;C!==r;C++){const A=o[C];u=m[C],h=w[C],v=g[C],y=A.computeGWlambda(),f=h*(u-y-A.eps*v),v+f<A.minForce?f=A.minForce-v:v+f>A.maxForce&&(f=A.maxForce-v),g[C]+=f,p+=f>0?f:-f,A.addToWlambda(f)}if(p*p<i)break}for(let C=0;C!==l;C++){const A=a[C],I=A.velocity,R=A.angularVelocity;A.vlambda.vmul(A.linearFactor,A.vlambda),I.vadd(A.vlambda,I),A.wlambda.vmul(A.angularFactor,A.wlambda),R.vadd(A.wlambda,R)}let b=o.length;const E=1/d;for(;b--;)o[b].multiplier=g[b]*E}return s}}const Zs=[],Ks=[],Js=[];N.STATIC;class Qs{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return this.objects.length===0?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class tn extends Qs{constructor(){super(...arguments),this.type=c}constructObject(){return new c}}const k={sphereSphere:B.types.SPHERE,spherePlane:B.types.SPHERE|B.types.PLANE,boxBox:B.types.BOX|B.types.BOX,sphereBox:B.types.SPHERE|B.types.BOX,planeBox:B.types.PLANE|B.types.BOX,convexConvex:B.types.CONVEXPOLYHEDRON,sphereConvex:B.types.SPHERE|B.types.CONVEXPOLYHEDRON,planeConvex:B.types.PLANE|B.types.CONVEXPOLYHEDRON,boxConvex:B.types.BOX|B.types.CONVEXPOLYHEDRON,sphereHeightfield:B.types.SPHERE|B.types.HEIGHTFIELD,boxHeightfield:B.types.BOX|B.types.HEIGHTFIELD,convexHeightfield:B.types.CONVEXPOLYHEDRON|B.types.HEIGHTFIELD,sphereParticle:B.types.PARTICLE|B.types.SPHERE,planeParticle:B.types.PLANE|B.types.PARTICLE,boxParticle:B.types.BOX|B.types.PARTICLE,convexParticle:B.types.PARTICLE|B.types.CONVEXPOLYHEDRON,cylinderCylinder:B.types.CYLINDER,sphereCylinder:B.types.SPHERE|B.types.CYLINDER,planeCylinder:B.types.PLANE|B.types.CYLINDER,boxCylinder:B.types.BOX|B.types.CYLINDER,convexCylinder:B.types.CONVEXPOLYHEDRON|B.types.CYLINDER,heightfieldCylinder:B.types.HEIGHTFIELD|B.types.CYLINDER,particleCylinder:B.types.PARTICLE|B.types.CYLINDER,sphereTrimesh:B.types.SPHERE|B.types.TRIMESH,planeTrimesh:B.types.PLANE|B.types.TRIMESH};class en{get[k.sphereSphere](){return this.sphereSphere}get[k.spherePlane](){return this.spherePlane}get[k.boxBox](){return this.boxBox}get[k.sphereBox](){return this.sphereBox}get[k.planeBox](){return this.planeBox}get[k.convexConvex](){return this.convexConvex}get[k.sphereConvex](){return this.sphereConvex}get[k.planeConvex](){return this.planeConvex}get[k.boxConvex](){return this.boxConvex}get[k.sphereHeightfield](){return this.sphereHeightfield}get[k.boxHeightfield](){return this.boxHeightfield}get[k.convexHeightfield](){return this.convexHeightfield}get[k.sphereParticle](){return this.sphereParticle}get[k.planeParticle](){return this.planeParticle}get[k.boxParticle](){return this.boxParticle}get[k.convexParticle](){return this.convexParticle}get[k.cylinderCylinder](){return this.convexConvex}get[k.sphereCylinder](){return this.sphereConvex}get[k.planeCylinder](){return this.planeConvex}get[k.boxCylinder](){return this.boxConvex}get[k.convexCylinder](){return this.convexConvex}get[k.heightfieldCylinder](){return this.heightfieldCylinder}get[k.particleCylinder](){return this.particleCylinder}get[k.sphereTrimesh](){return this.sphereTrimesh}get[k.planeTrimesh](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new tn,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,s,n,i,o){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new Rs(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&s.collisionResponse&&n.collisionResponse;const a=this.currentContactMaterial;r.restitution=a.restitution,r.setSpookParams(a.contactEquationStiffness,a.contactEquationRelaxation,this.world.dt);const l=s.material||t.material,d=n.material||e.material;return l&&d&&l.restitution>=0&&d.restitution>=0&&(r.restitution=l.restitution*d.restitution),r.si=i||s,r.sj=o||n,r}createFrictionEquationsFromContact(t,e){const s=t.bi,n=t.bj,i=t.si,o=t.sj,r=this.world,a=this.currentContactMaterial;let l=a.friction;const d=i.material||s.material,u=o.material||n.material;if(d&&u&&d.friction>=0&&u.friction>=0&&(l=d.friction*u.friction),l>0){const h=l*(r.frictionGravity||r.gravity).length();let f=s.invMass+n.invMass;f>0&&(f=1/f);const p=this.frictionEquationPool,y=p.length?p.pop():new ae(s,n,h*f),v=p.length?p.pop():new ae(s,n,h*f);return y.bi=v.bi=s,y.bj=v.bj=n,y.minForce=v.minForce=-h*f,y.maxForce=v.maxForce=h*f,y.ri.copy(t.ri),y.rj.copy(t.rj),v.ri.copy(t.ri),v.rj.copy(t.rj),t.ni.tangents(y.t,v.t),y.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),v.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),y.enabled=v.enabled=t.enabled,e.push(y,v),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||t===1)return;const s=this.frictionResult[this.frictionResult.length-2],n=this.frictionResult[this.frictionResult.length-1];rt.setZero(),lt.setZero(),ht.setZero();const i=e.bi;e.bj;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==i?(rt.vadd(e.ni,rt),lt.vadd(e.ri,lt),ht.vadd(e.rj,ht)):(rt.vsub(e.ni,rt),lt.vadd(e.rj,lt),ht.vadd(e.ri,ht));const o=1/t;lt.scale(o,s.ri),ht.scale(o,s.rj),n.ri.copy(s.ri),n.rj.copy(s.rj),rt.normalize(),rt.tangents(s.t,n.t)}getContacts(t,e,s,n,i,o,r){this.contactPointPool=i,this.frictionEquationPool=r,this.result=n,this.frictionResult=o;const a=on,l=rn,d=sn,u=nn;for(let h=0,f=t.length;h!==f;h++){const p=t[h],y=e[h];let v=null;p.material&&y.material&&(v=s.getContactMaterial(p.material,y.material)||null);const w=p.type&N.KINEMATIC&&y.type&N.STATIC||p.type&N.STATIC&&y.type&N.KINEMATIC||p.type&N.KINEMATIC&&y.type&N.KINEMATIC;for(let m=0;m<p.shapes.length;m++){p.quaternion.mult(p.shapeOrientations[m],a),p.quaternion.vmult(p.shapeOffsets[m],d),d.vadd(p.position,d);const g=p.shapes[m];for(let b=0;b<y.shapes.length;b++){y.quaternion.mult(y.shapeOrientations[b],l),y.quaternion.vmult(y.shapeOffsets[b],u),u.vadd(y.position,u);const E=y.shapes[b];if(!(g.collisionFilterMask&E.collisionFilterGroup&&E.collisionFilterMask&g.collisionFilterGroup)||d.distanceTo(u)>g.boundingSphereRadius+E.boundingSphereRadius)continue;let C=null;g.material&&E.material&&(C=s.getContactMaterial(g.material,E.material)||null),this.currentContactMaterial=C||v||s.defaultContactMaterial;const A=g.type|E.type,I=this[A];if(I){let R=!1;g.type<E.type?R=I.call(this,g,E,d,u,a,l,p,y,g,E,w):R=I.call(this,E,g,u,d,l,a,y,p,g,E,w),R&&w&&(s.shapeOverlapKeeper.set(g.id,E.id),s.bodyOverlapKeeper.set(p.id,y.id))}}}}}sphereSphere(t,e,s,n,i,o,r,a,l,d,u){if(u)return s.distanceSquared(n)<(t.radius+e.radius)**2;const h=this.createContactEquation(r,a,t,e,l,d);n.vsub(s,h.ni),h.ni.normalize(),h.ri.copy(h.ni),h.rj.copy(h.ni),h.ri.scale(t.radius,h.ri),h.rj.scale(-e.radius,h.rj),h.ri.vadd(s,h.ri),h.ri.vsub(r.position,h.ri),h.rj.vadd(n,h.rj),h.rj.vsub(a.position,h.rj),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}spherePlane(t,e,s,n,i,o,r,a,l,d,u){const h=this.createContactEquation(r,a,t,e,l,d);if(h.ni.set(0,0,1),o.vmult(h.ni,h.ni),h.ni.negate(h.ni),h.ni.normalize(),h.ni.scale(t.radius,h.ri),s.vsub(n,Mt),h.ni.scale(h.ni.dot(Mt),le),Mt.vsub(le,h.rj),-Mt.dot(h.ni)<=t.radius){if(u)return!0;const f=h.ri,p=h.rj;f.vadd(s,f),f.vsub(r.position,f),p.vadd(n,p),p.vsub(a.position,p),this.result.push(h),this.createFrictionEquationsFromContact(h,this.frictionResult)}}boxBox(t,e,s,n,i,o,r,a,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,s,n,i,o,r,a,t,e,u)}sphereBox(t,e,s,n,i,o,r,a,l,d,u){const h=this.v3pool,f=Pn;s.vsub(n,St),e.getSideNormals(f,o);const p=t.radius;let y=!1;const v=_n,w=Rn,m=qn;let g=null,b=0,E=0,C=0,A=null;for(let x=0,O=f.length;x!==O&&y===!1;x++){const P=Nn;P.copy(f[x]);const q=P.length();P.normalize();const V=St.dot(P);if(V<q+p&&V>0){const Y=Tn,F=In;Y.copy(f[(x+1)%3]),F.copy(f[(x+2)%3]);const at=Y.length(),gt=F.length();Y.normalize(),F.normalize();const Nt=St.dot(Y),Tt=St.dot(F);if(Nt<at&&Nt>-at&&Tt<gt&&Tt>-gt){const Yt=Math.abs(V-q-p);if((A===null||Yt<A)&&(A=Yt,E=Nt,C=Tt,g=q,v.copy(P),w.copy(Y),m.copy(F),b++,u))return!0}}}if(b){y=!0;const x=this.createContactEquation(r,a,t,e,l,d);v.scale(-p,x.ri),x.ni.copy(v),x.ni.negate(x.ni),v.scale(g,v),w.scale(E,w),v.vadd(w,v),m.scale(C,m),v.vadd(m,x.rj),x.ri.vadd(s,x.ri),x.ri.vsub(r.position,x.ri),x.rj.vadd(n,x.rj),x.rj.vsub(a.position,x.rj),this.result.push(x),this.createFrictionEquationsFromContact(x,this.frictionResult)}let I=h.get();const R=Fn;for(let x=0;x!==2&&!y;x++)for(let O=0;O!==2&&!y;O++)for(let P=0;P!==2&&!y;P++)if(I.set(0,0,0),x?I.vadd(f[0],I):I.vsub(f[0],I),O?I.vadd(f[1],I):I.vsub(f[1],I),P?I.vadd(f[2],I):I.vsub(f[2],I),n.vadd(I,R),R.vsub(s,R),R.lengthSquared()<p*p){if(u)return!0;y=!0;const q=this.createContactEquation(r,a,t,e,l,d);q.ri.copy(R),q.ri.normalize(),q.ni.copy(q.ri),q.ri.scale(p,q.ri),q.rj.copy(I),q.ri.vadd(s,q.ri),q.ri.vsub(r.position,q.ri),q.rj.vadd(n,q.rj),q.rj.vsub(a.position,q.rj),this.result.push(q),this.createFrictionEquationsFromContact(q,this.frictionResult)}h.release(I),I=null;const T=h.get(),_=h.get(),L=h.get(),z=h.get(),S=h.get(),M=f.length;for(let x=0;x!==M&&!y;x++)for(let O=0;O!==M&&!y;O++)if(x%3!==O%3){f[O].cross(f[x],T),T.normalize(),f[x].vadd(f[O],_),L.copy(s),L.vsub(_,L),L.vsub(n,L);const P=L.dot(T);T.scale(P,z);let q=0;for(;q===x%3||q===O%3;)q++;S.copy(s),S.vsub(z,S),S.vsub(_,S),S.vsub(n,S);const V=Math.abs(P),Y=S.length();if(V<f[q].length()&&Y<p){if(u)return!0;y=!0;const F=this.createContactEquation(r,a,t,e,l,d);_.vadd(z,F.rj),F.rj.copy(F.rj),S.negate(F.ni),F.ni.normalize(),F.ri.copy(F.rj),F.ri.vadd(n,F.ri),F.ri.vsub(s,F.ri),F.ri.normalize(),F.ri.scale(p,F.ri),F.ri.vadd(s,F.ri),F.ri.vsub(r.position,F.ri),F.rj.vadd(n,F.rj),F.rj.vsub(a.position,F.rj),this.result.push(F),this.createFrictionEquationsFromContact(F,this.frictionResult)}}h.release(T,_,L,z,S)}planeBox(t,e,s,n,i,o,r,a,l,d,u){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,s,n,i,o,r,a,t,e,u)}convexConvex(t,e,s,n,i,o,r,a,l,d,u,h,f){const p=Kn;if(!(s.distanceTo(n)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,s,i,n,o,p,h,f)){const y=[],v=Jn;t.clipAgainstHull(s,i,e,n,o,p,-100,100,y);let w=0;for(let m=0;m!==y.length;m++){if(u)return!0;const g=this.createContactEquation(r,a,t,e,l,d),b=g.ri,E=g.rj;p.negate(g.ni),y[m].normal.negate(v),v.scale(y[m].depth,v),y[m].point.vadd(v,b),E.copy(y[m].point),b.vsub(s,b),E.vsub(n,E),b.vadd(s,b),b.vsub(r.position,b),E.vadd(n,E),E.vsub(a.position,E),this.result.push(g),w++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(g,this.frictionResult)}this.enableFrictionReduction&&w&&this.createFrictionFromAverage(w)}}sphereConvex(t,e,s,n,i,o,r,a,l,d,u){const h=this.v3pool;s.vsub(n,Ln);const f=e.faceNormals,p=e.faces,y=e.vertices,v=t.radius;let w=!1;for(let m=0;m!==y.length;m++){const g=y[m],b=kn;o.vmult(g,b),n.vadd(b,b);const E=Wn;if(b.vsub(s,E),E.lengthSquared()<v*v){if(u)return!0;w=!0;const C=this.createContactEquation(r,a,t,e,l,d);C.ri.copy(E),C.ri.normalize(),C.ni.copy(C.ri),C.ri.scale(v,C.ri),b.vsub(n,C.rj),C.ri.vadd(s,C.ri),C.ri.vsub(r.position,C.ri),C.rj.vadd(n,C.rj),C.rj.vsub(a.position,C.rj),this.result.push(C),this.createFrictionEquationsFromContact(C,this.frictionResult);return}}for(let m=0,g=p.length;m!==g&&w===!1;m++){const b=f[m],E=p[m],C=Vn;o.vmult(b,C);const A=Gn;o.vmult(y[E[0]],A),A.vadd(n,A);const I=Hn;C.scale(-v,I),s.vadd(I,I);const R=Dn;I.vsub(A,R);const T=R.dot(C),_=Yn;if(s.vsub(A,_),T<0&&_.dot(C)>0){const L=[];for(let z=0,S=E.length;z!==S;z++){const M=h.get();o.vmult(y[E[z]],M),n.vadd(M,M),L.push(M)}if(Bn(L,C,s)){if(u)return!0;w=!0;const z=this.createContactEquation(r,a,t,e,l,d);C.scale(-v,z.ri),C.negate(z.ni);const S=h.get();C.scale(-T,S);const M=h.get();C.scale(-v,M),s.vsub(n,z.rj),z.rj.vadd(M,z.rj),z.rj.vadd(S,z.rj),z.rj.vadd(n,z.rj),z.rj.vsub(a.position,z.rj),z.ri.vadd(s,z.ri),z.ri.vsub(r.position,z.ri),h.release(S),h.release(M),this.result.push(z),this.createFrictionEquationsFromContact(z,this.frictionResult);for(let x=0,O=L.length;x!==O;x++)h.release(L[x]);return}else for(let z=0;z!==E.length;z++){const S=h.get(),M=h.get();o.vmult(y[E[(z+1)%E.length]],S),o.vmult(y[E[(z+2)%E.length]],M),n.vadd(S,S),n.vadd(M,M);const x=jn;M.vsub(S,x);const O=On;x.unit(O);const P=h.get(),q=h.get();s.vsub(S,q);const V=q.dot(O);O.scale(V,P),P.vadd(S,P);const Y=h.get();if(P.vsub(s,Y),V>0&&V*V<x.lengthSquared()&&Y.lengthSquared()<v*v){if(u)return!0;const F=this.createContactEquation(r,a,t,e,l,d);P.vsub(n,F.rj),P.vsub(s,F.ni),F.ni.normalize(),F.ni.scale(v,F.ri),F.rj.vadd(n,F.rj),F.rj.vsub(a.position,F.rj),F.ri.vadd(s,F.ri),F.ri.vsub(r.position,F.ri),this.result.push(F),this.createFrictionEquationsFromContact(F,this.frictionResult);for(let at=0,gt=L.length;at!==gt;at++)h.release(L[at]);h.release(S),h.release(M),h.release(P),h.release(Y),h.release(q);return}h.release(S),h.release(M),h.release(P),h.release(Y),h.release(q)}for(let z=0,S=L.length;z!==S;z++)h.release(L[z])}}}planeConvex(t,e,s,n,i,o,r,a,l,d,u){const h=Xn,f=Un;f.set(0,0,1),i.vmult(f,f);let p=0;const y=$n;for(let v=0;v!==e.vertices.length;v++)if(h.copy(e.vertices[v]),o.vmult(h,h),n.vadd(h,h),h.vsub(s,y),f.dot(y)<=0){if(u)return!0;const m=this.createContactEquation(r,a,t,e,l,d),g=Zn;f.scale(f.dot(y),g),h.vsub(g,g),g.vsub(s,m.ri),m.ni.copy(f),h.vsub(n,m.rj),m.ri.vadd(s,m.ri),m.ri.vsub(r.position,m.ri),m.rj.vadd(n,m.rj),m.rj.vsub(a.position,m.rj),this.result.push(m),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(m,this.frictionResult)}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,s,n,i,o,r,a,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,s,n,i,o,r,a,t,e,u)}sphereHeightfield(t,e,s,n,i,o,r,a,l,d,u){const h=e.data,f=t.radius,p=e.elementSize,y=hi,v=li;W.pointToLocalFrame(n,o,s,v);let w=Math.floor((v.x-f)/p)-1,m=Math.ceil((v.x+f)/p)+1,g=Math.floor((v.y-f)/p)-1,b=Math.ceil((v.y+f)/p)+1;if(m<0||b<0||w>h.length||g>h[0].length)return;w<0&&(w=0),m<0&&(m=0),g<0&&(g=0),b<0&&(b=0),w>=h.length&&(w=h.length-1),m>=h.length&&(m=h.length-1),b>=h[0].length&&(b=h[0].length-1),g>=h[0].length&&(g=h[0].length-1);const E=[];e.getRectMinMax(w,g,m,b,E);const C=E[0],A=E[1];if(v.z-f>A||v.z+f<C)return;const I=this.result;for(let R=w;R<m;R++)for(let T=g;T<b;T++){const _=I.length;let L=!1;if(e.getConvexTrianglePillar(R,T,!1),W.pointToWorldFrame(n,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(L=this.sphereConvex(t,e.pillarConvex,s,y,i,o,r,a,t,e,u)),u&&L||(e.getConvexTrianglePillar(R,T,!0),W.pointToWorldFrame(n,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(L=this.sphereConvex(t,e.pillarConvex,s,y,i,o,r,a,t,e,u)),u&&L))return!0;if(I.length-_>2)return}}boxHeightfield(t,e,s,n,i,o,r,a,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,s,n,i,o,r,a,t,e,u)}convexHeightfield(t,e,s,n,i,o,r,a,l,d,u){const h=e.data,f=e.elementSize,p=t.boundingSphereRadius,y=ci,v=ai,w=ri;W.pointToLocalFrame(n,o,s,w);let m=Math.floor((w.x-p)/f)-1,g=Math.ceil((w.x+p)/f)+1,b=Math.floor((w.y-p)/f)-1,E=Math.ceil((w.y+p)/f)+1;if(g<0||E<0||m>h.length||b>h[0].length)return;m<0&&(m=0),g<0&&(g=0),b<0&&(b=0),E<0&&(E=0),m>=h.length&&(m=h.length-1),g>=h.length&&(g=h.length-1),E>=h[0].length&&(E=h[0].length-1),b>=h[0].length&&(b=h[0].length-1);const C=[];e.getRectMinMax(m,b,g,E,C);const A=C[0],I=C[1];if(!(w.z-p>I||w.z+p<A))for(let R=m;R<g;R++)for(let T=b;T<E;T++){let _=!1;if(e.getConvexTrianglePillar(R,T,!1),W.pointToWorldFrame(n,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(_=this.convexConvex(t,e.pillarConvex,s,y,i,o,r,a,null,null,u,v,null)),u&&_||(e.getConvexTrianglePillar(R,T,!0),W.pointToWorldFrame(n,o,e.pillarOffset,y),s.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(_=this.convexConvex(t,e.pillarConvex,s,y,i,o,r,a,null,null,u,v,null)),u&&_))return!0}}sphereParticle(t,e,s,n,i,o,r,a,l,d,u){const h=si;if(h.set(0,0,1),n.vsub(s,h),h.lengthSquared()<=t.radius*t.radius){if(u)return!0;const p=this.createContactEquation(a,r,e,t,l,d);h.normalize(),p.rj.copy(h),p.rj.scale(t.radius,p.rj),p.ni.copy(h),p.ni.negate(p.ni),p.ri.set(0,0,0),this.result.push(p),this.createFrictionEquationsFromContact(p,this.frictionResult)}}planeParticle(t,e,s,n,i,o,r,a,l,d,u){const h=Qn;h.set(0,0,1),r.quaternion.vmult(h,h);const f=ti;if(n.vsub(r.position,f),h.dot(f)<=0){if(u)return!0;const y=this.createContactEquation(a,r,e,t,l,d);y.ni.copy(h),y.ni.negate(y.ni),y.ri.set(0,0,0);const v=ei;h.scale(h.dot(n),v),n.vsub(v,v),y.rj.copy(v),this.result.push(y),this.createFrictionEquationsFromContact(y,this.frictionResult)}}boxParticle(t,e,s,n,i,o,r,a,l,d,u){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,s,n,i,o,r,a,t,e,u)}convexParticle(t,e,s,n,i,o,r,a,l,d,u){let h=-1;const f=ii,p=oi;let y=null;const v=ni;if(v.copy(n),v.vsub(s,v),i.conjugate(he),he.vmult(v,v),t.pointIsInside(v)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(s,i),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(i);for(let w=0,m=t.faces.length;w!==m;w++){const g=[t.worldVertices[t.faces[w][0]]],b=t.worldFaceNormals[w];n.vsub(g[0],de);const E=-b.dot(de);if(y===null||Math.abs(E)<Math.abs(y)){if(u)return!0;y=E,h=w,f.copy(b)}}if(h!==-1){const w=this.createContactEquation(a,r,e,t,l,d);f.scale(y,p),p.vadd(n,p),p.vsub(s,p),w.rj.copy(p),f.negate(w.ni),w.ri.set(0,0,0);const m=w.ri,g=w.rj;m.vadd(n,m),m.vsub(a.position,m),g.vadd(s,g),g.vsub(r.position,g),this.result.push(w),this.createFrictionEquationsFromContact(w,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,s,n,i,o,r,a,l,d,u){return this.convexHeightfield(e,t,n,s,o,i,a,r,l,d,u)}particleCylinder(t,e,s,n,i,o,r,a,l,d,u){return this.convexParticle(e,t,n,s,o,i,a,r,l,d,u)}sphereTrimesh(t,e,s,n,i,o,r,a,l,d,u){const h=fn,f=mn,p=vn,y=yn,v=wn,w=xn,m=zn,g=pn,b=dn,E=Cn;W.pointToLocalFrame(n,o,s,v);const C=t.radius;m.lowerBound.set(v.x-C,v.y-C,v.z-C),m.upperBound.set(v.x+C,v.y+C,v.z+C),e.getTrianglesInAABB(m,E);const A=un,I=t.radius*t.radius;for(let z=0;z<E.length;z++)for(let S=0;S<3;S++)if(e.getVertex(e.indices[E[z]*3+S],A),A.vsub(v,b),b.lengthSquared()<=I){if(g.copy(A),W.pointToWorldFrame(n,o,g,A),A.vsub(s,b),u)return!0;let M=this.createContactEquation(r,a,t,e,l,d);M.ni.copy(b),M.ni.normalize(),M.ri.copy(M.ni),M.ri.scale(t.radius,M.ri),M.ri.vadd(s,M.ri),M.ri.vsub(r.position,M.ri),M.rj.copy(A),M.rj.vsub(a.position,M.rj),this.result.push(M),this.createFrictionEquationsFromContact(M,this.frictionResult)}for(let z=0;z<E.length;z++)for(let S=0;S<3;S++){e.getVertex(e.indices[E[z]*3+S],h),e.getVertex(e.indices[E[z]*3+(S+1)%3],f),f.vsub(h,p),v.vsub(f,w);const M=w.dot(p);v.vsub(h,w);let x=w.dot(p);if(x>0&&M<0&&(v.vsub(h,w),y.copy(p),y.normalize(),x=w.dot(y),y.scale(x,w),w.vadd(h,w),w.distanceTo(v)<t.radius)){if(u)return!0;const P=this.createContactEquation(r,a,t,e,l,d);w.vsub(v,P.ni),P.ni.normalize(),P.ni.scale(t.radius,P.ri),P.ri.vadd(s,P.ri),P.ri.vsub(r.position,P.ri),W.pointToWorldFrame(n,o,w,w),w.vsub(a.position,P.rj),W.vectorToWorldFrame(o,P.ni,P.ni),W.vectorToWorldFrame(o,P.ri,P.ri),this.result.push(P),this.createFrictionEquationsFromContact(P,this.frictionResult)}}const R=gn,T=bn,_=En,L=hn;for(let z=0,S=E.length;z!==S;z++){e.getTriangleVertices(E[z],R,T,_),e.getNormal(E[z],L),v.vsub(R,w);let M=w.dot(L);if(L.scale(M,w),v.vsub(w,w),M=w.distanceTo(v),G.pointInTriangle(w,R,T,_)&&M<t.radius){if(u)return!0;let x=this.createContactEquation(r,a,t,e,l,d);w.vsub(v,x.ni),x.ni.normalize(),x.ni.scale(t.radius,x.ri),x.ri.vadd(s,x.ri),x.ri.vsub(r.position,x.ri),W.pointToWorldFrame(n,o,w,w),w.vsub(a.position,x.rj),W.vectorToWorldFrame(o,x.ni,x.ni),W.vectorToWorldFrame(o,x.ri,x.ri),this.result.push(x),this.createFrictionEquationsFromContact(x,this.frictionResult)}}E.length=0}planeTrimesh(t,e,s,n,i,o,r,a,l,d,u){const h=new c,f=cn;f.set(0,0,1),i.vmult(f,f);for(let p=0;p<e.vertices.length/3;p++){e.getVertex(p,h);const y=new c;y.copy(h),W.pointToWorldFrame(n,o,y,h);const v=an;if(h.vsub(s,v),f.dot(v)<=0){if(u)return!0;const m=this.createContactEquation(r,a,t,e,l,d);m.ni.copy(f);const g=ln;f.scale(v.dot(f),g),h.vsub(g,g),m.ri.copy(g),m.ri.vsub(r.position,m.ri),m.rj.copy(h),m.rj.vsub(a.position,m.rj),this.result.push(m),this.createFrictionEquationsFromContact(m,this.frictionResult)}}}}const rt=new c,lt=new c,ht=new c,sn=new c,nn=new c,on=new H,rn=new H,cn=new c,an=new c,ln=new c,hn=new c,dn=new c;new c;const un=new c,pn=new c,fn=new c,mn=new c,vn=new c,yn=new c,wn=new c,xn=new c,gn=new c,bn=new c,En=new c,zn=new U,Cn=[],Mt=new c,le=new c,Mn=new c,Sn=new c,An=new c;function Bn(j,t,e){let s=null;const n=j.length;for(let i=0;i!==n;i++){const o=j[i],r=Mn;j[(i+1)%n].vsub(o,r);const a=Sn;r.cross(t,a);const l=An;e.vsub(o,l);const d=a.dot(l);if(s===null||d>0&&s===!0||d<=0&&s===!1){s===null&&(s=d>0);continue}else return!1}return!0}const St=new c,Nn=new c,Tn=new c,In=new c,Pn=[new c,new c,new c,new c,new c,new c],Fn=new c,_n=new c,Rn=new c,qn=new c,Ln=new c,jn=new c,On=new c,Wn=new c,kn=new c,Vn=new c,Gn=new c,Hn=new c,Dn=new c,Yn=new c;new c;new c;const Xn=new c,Un=new c,$n=new c,Zn=new c,Kn=new c,Jn=new c,Qn=new c,ti=new c,ei=new c,si=new c,he=new H,ni=new c;new c;const ii=new c,de=new c,oi=new c,ri=new c,ci=new c,ai=[0],li=new c,hi=new c;class ue{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const s=e;e=t,t=s}return t<<16|e}set(t,e){const s=this.getKey(t,e),n=this.current;let i=0;for(;s>n[i];)i++;if(s!==n[i]){for(let o=n.length-1;o>=i;o--)n[o+1]=n[o];n[i]=s}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const s=this.current,n=this.previous,i=s.length,o=n.length;let r=0;for(let a=0;a<i;a++){let l=!1;const d=s[a];for(;d>n[r];)r++;l=d===n[r],l||pe(t,d)}r=0;for(let a=0;a<o;a++){let l=!1;const d=n[a];for(;d>s[r];)r++;l=s[r]===d,l||pe(e,d)}}}function pe(j,t){j.push((t&4294901760)>>16,t&65535)}const kt=(j,t)=>j<t?`${j}-${t}`:`${t}-${j}`;class di{constructor(){this.data={keys:[]}}get(t,e){const s=kt(t,e);return this.data[s]}set(t,e,s){const n=kt(t,e);this.get(t,e)||this.data.keys.push(n),this.data[n]=s}delete(t,e){const s=kt(t,e),n=this.data.keys.indexOf(s);n!==-1&&this.data.keys.splice(n,1),delete this.data[s]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){const s=e.pop();delete t[s]}}}class ui extends fe{constructor(t){t===void 0&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=t.quatNormalizeSkip!==void 0?t.quatNormalizeSkip:0,this.quatNormalizeFast=t.quatNormalizeFast!==void 0?t.quatNormalizeFast:!1,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new c,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new c,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=t.broadphase!==void 0?t.broadphase:new vs,this.bodies=[],this.hasActiveBodies=!1,this.solver=t.solver!==void 0?t.solver:new $s,this.constraints=[],this.narrowphase=new en(this),this.collisionMatrix=new Jt,this.collisionMatrixPrevious=new Jt,this.bodyOverlapKeeper=new ue,this.shapeOverlapKeeper=new ue,this.contactmaterials=[],this.contactMaterialTable=new di,this.defaultMaterial=new ut("default"),this.defaultContactMaterial=new xt(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);e!==-1&&this.constraints.splice(e,1)}rayTest(t,e,s){s instanceof At?this.raycastClosest(t,e,{skipBackfaces:!0},s):this.raycastAll(t,e,{skipBackfaces:!0},s)}raycastAll(t,e,s,n){return s===void 0&&(s={}),s.mode=G.ALL,s.from=t,s.to=e,s.callback=n,Vt.intersectWorld(this,s)}raycastAny(t,e,s,n){return s===void 0&&(s={}),s.mode=G.ANY,s.from=t,s.to=e,s.result=n,Vt.intersectWorld(this,s)}raycastClosest(t,e,s,n){return s===void 0&&(s={}),s.mode=G.CLOSEST,s.from=t,s.to=e,s.result=n,Vt.intersectWorld(this,s)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof N&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,s=this.bodies,n=s.indexOf(t);if(n!==-1){s.splice(n,1);for(let i=0;i!==s.length;i++)s[i].index=i;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let s=0;s<e.length;s++){const n=e[s].shapes;for(let i=0;i<n.length;i++){const o=n[i];if(o.id===t)return o}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);e!==-1&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){t===void 0&&(t=1/60),e===void 0&&(e=10);const s=D.now()/1e3;if(!this.lastCallTime)this.step(t,void 0,e);else{const n=s-this.lastCallTime;this.step(t,n,e)}this.lastCallTime=s}step(t,e,s){if(s===void 0&&(s=10),e===void 0)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const n=D.now();let i=0;for(;this.accumulator>=t&&i<s&&(this.internalStep(t),this.accumulator-=t,i++,!(D.now()-n>t*1e3)););this.accumulator=this.accumulator%t;const o=this.accumulator/t;for(let r=0;r!==this.bodies.length;r++){const a=this.bodies[r];a.previousPosition.lerp(a.position,o,a.interpolatedPosition),a.previousQuaternion.slerp(a.quaternion,o,a.interpolatedQuaternion),a.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,s=yi,n=wi,i=this.bodies.length,o=this.bodies,r=this.solver,a=this.gravity,l=this.doProfiling,d=this.profile,u=N.DYNAMIC;let h=-1/0;const f=this.constraints,p=vi;a.length();const y=a.x,v=a.y,w=a.z;let m=0;for(l&&(h=D.now()),m=0;m!==i;m++){const z=o[m];if(z.type===u){const S=z.force,M=z.mass;S.x+=M*y,S.y+=M*v,S.z+=M*w}}for(let z=0,S=this.subsystems.length;z!==S;z++)this.subsystems[z].update();l&&(h=D.now()),s.length=0,n.length=0,this.broadphase.collisionPairs(this,s,n),l&&(d.broadphase=D.now()-h);let g=f.length;for(m=0;m!==g;m++){const z=f[m];if(!z.collideConnected)for(let S=s.length-1;S>=0;S-=1)(z.bodyA===s[S]&&z.bodyB===n[S]||z.bodyB===s[S]&&z.bodyA===n[S])&&(s.splice(S,1),n.splice(S,1))}this.collisionMatrixTick(),l&&(h=D.now());const b=mi,E=e.length;for(m=0;m!==E;m++)b.push(e[m]);e.length=0;const C=this.frictionEquations.length;for(m=0;m!==C;m++)p.push(this.frictionEquations[m]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(s,n,this,e,b,this.frictionEquations,p),l&&(d.narrowphase=D.now()-h),l&&(h=D.now()),m=0;m<this.frictionEquations.length;m++)r.addEquation(this.frictionEquations[m]);const A=e.length;for(let z=0;z!==A;z++){const S=e[z],M=S.bi,x=S.bj,O=S.si,P=S.sj;let q;if(M.material&&x.material?q=this.getContactMaterial(M.material,x.material)||this.defaultContactMaterial:q=this.defaultContactMaterial,q.friction,M.material&&x.material&&(M.material.friction>=0&&x.material.friction>=0&&M.material.friction*x.material.friction,M.material.restitution>=0&&x.material.restitution>=0&&(S.restitution=M.material.restitution*x.material.restitution)),r.addEquation(S),M.allowSleep&&M.type===N.DYNAMIC&&M.sleepState===N.SLEEPING&&x.sleepState===N.AWAKE&&x.type!==N.STATIC){const V=x.velocity.lengthSquared()+x.angularVelocity.lengthSquared(),Y=x.sleepSpeedLimit**2;V>=Y*2&&(M.wakeUpAfterNarrowphase=!0)}if(x.allowSleep&&x.type===N.DYNAMIC&&x.sleepState===N.SLEEPING&&M.sleepState===N.AWAKE&&M.type!==N.STATIC){const V=M.velocity.lengthSquared()+M.angularVelocity.lengthSquared(),Y=M.sleepSpeedLimit**2;V>=Y*2&&(x.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(M,x,!0),this.collisionMatrixPrevious.get(M,x)||(ft.body=x,ft.contact=S,M.dispatchEvent(ft),ft.body=M,x.dispatchEvent(ft)),this.bodyOverlapKeeper.set(M.id,x.id),this.shapeOverlapKeeper.set(O.id,P.id)}for(this.emitContactEvents(),l&&(d.makeContactConstraints=D.now()-h,h=D.now()),m=0;m!==i;m++){const z=o[m];z.wakeUpAfterNarrowphase&&(z.wakeUp(),z.wakeUpAfterNarrowphase=!1)}for(g=f.length,m=0;m!==g;m++){const z=f[m];z.update();for(let S=0,M=z.equations.length;S!==M;S++){const x=z.equations[S];r.addEquation(x)}}r.solve(t,this),l&&(d.solve=D.now()-h),r.removeAllEquations();const I=Math.pow;for(m=0;m!==i;m++){const z=o[m];if(z.type&u){const S=I(1-z.linearDamping,t),M=z.velocity;M.scale(S,M);const x=z.angularVelocity;if(x){const O=I(1-z.angularDamping,t);x.scale(O,x)}}}this.dispatchEvent(fi),l&&(h=D.now());const T=this.stepnumber%(this.quatNormalizeSkip+1)===0,_=this.quatNormalizeFast;for(m=0;m!==i;m++)o[m].integrate(t,T,_);this.clearForces(),this.broadphase.dirty=!0,l&&(d.integrate=D.now()-h),this.stepnumber+=1,this.dispatchEvent(pi);let L=!0;if(this.allowSleep)for(L=!1,m=0;m!==i;m++){const z=o[m];z.sleepTick(this.time),z.sleepState!==N.SLEEPING&&(L=!0)}this.hasActiveBodies=L}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(et,st),t){for(let i=0,o=et.length;i<o;i+=2)mt.bodyA=this.getBodyById(et[i]),mt.bodyB=this.getBodyById(et[i+1]),this.dispatchEvent(mt);mt.bodyA=mt.bodyB=null}if(e){for(let i=0,o=st.length;i<o;i+=2)vt.bodyA=this.getBodyById(st[i]),vt.bodyB=this.getBodyById(st[i+1]),this.dispatchEvent(vt);vt.bodyA=vt.bodyB=null}et.length=st.length=0;const s=this.hasAnyEventListener("beginShapeContact"),n=this.hasAnyEventListener("endShapeContact");if((s||n)&&this.shapeOverlapKeeper.getDiff(et,st),s){for(let i=0,o=et.length;i<o;i+=2){const r=this.getShapeById(et[i]),a=this.getShapeById(et[i+1]);nt.shapeA=r,nt.shapeB=a,r&&(nt.bodyA=r.body),a&&(nt.bodyB=a.body),this.dispatchEvent(nt)}nt.bodyA=nt.bodyB=nt.shapeA=nt.shapeB=null}if(n){for(let i=0,o=st.length;i<o;i+=2){const r=this.getShapeById(st[i]),a=this.getShapeById(st[i+1]);it.shapeA=r,it.shapeB=a,r&&(it.bodyA=r.body),a&&(it.bodyB=a.body),this.dispatchEvent(it)}it.bodyA=it.bodyB=it.shapeA=it.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let s=0;s!==e;s++){const n=t[s];n.force,n.torque,n.force.set(0,0,0),n.torque.set(0,0,0)}}}new U;const Vt=new G,D=globalThis.performance||{};if(!D.now){let j=Date.now();D.timing&&D.timing.navigationStart&&(j=D.timing.navigationStart),D.now=()=>Date.now()-j}new c;const pi={type:"postStep"},fi={type:"preStep"},ft={type:N.COLLIDE_EVENT_NAME,body:null,contact:null},mi=[],vi=[],yi=[],wi=[],et=[],st=[],mt={type:"beginContact",bodyA:null,bodyB:null},vt={type:"endContact",bodyA:null,bodyB:null},nt={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},it={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null};function xi(j){let t,e,s;return{c(){t=It("div"),e=It("div"),s=It("canvas"),this.h()},l(n){t=Pt(n,"DIV",{});var i=Ft(t);e=Pt(i,"DIV",{class:!0});var o=Ft(e);s=Pt(o,"CANVAS",{class:!0}),Ft(s).forEach(bt),o.forEach(bt),i.forEach(bt),this.h()},h(){Xt(s,"class","webgl svelte-1xjiexi"),Xt(e,"class","app svelte-1xjiexi")},m(n,i){Se(n,t,i),Ut(t,e),Ut(e,s)},p:_t,i:_t,o:_t,d(n){n&&bt(t)}}}function gi(j){return Ae(()=>{We.enabled=!1;const t=new Ge,e={create:()=>{L(10.5,{x:(Math.random()-.5)*5,y:200,z:(Math.random()-.5)*5},1e3,{x:0,y:1e6,z:0})},reset:()=>{for(const x of C)x.body.removeEventListener("collide",a),l.removeBody(x.body),n.remove(x.mesh);C.length=0}};t.add(e,"create").name("Dinosaurs extinction"),t.add(e,"reset").name("Delete All");const s=document.querySelector("canvas.webgl"),n=new Be;new Ne;const o=new Te().load(["/three/journey/21/textures/environmentMaps/0/px.png","/three/journey/21/textures/environmentMaps/0/nx.png","/three/journey/21/textures/environmentMaps/0/py.png","/three/journey/21/textures/environmentMaps/0/ny.png","/three/journey/21/textures/environmentMaps/0/pz.png","/three/journey/21/textures/environmentMaps/0/nz.png"]),r=new Audio("/three/journey/21/sounds/hit.mp3"),a=x=>{x.contact.getImpactVelocityAlongNormal()>100&&(r.currentTime=0,r.play())},l=new ui;l.gravity.set(0,-9.82*2,0),l.allowSleep=!0,l.broadphase=new dt(l);const d=new ut("concrete"),u=new ut("plastic"),h=new xt(d,u,{friction:.8,restitution:.5});l.addContactMaterial(h);const f=new Xs,p=new N({mass:0,shape:f,material:d});p.quaternion.setFromAxisAngle(new c(1,0,0),-Math.PI*.5),l.addBody(p);const y=new Rt(new Ie(10,10),new qt({color:"#777777",metalness:.3,roughness:.4,envMap:o,envMapIntensity:.5}));y.receiveShadow=!0,y.rotation.x=-Math.PI*.5,n.add(y);const v=new Pe(16777215,.7);n.add(v);const w=new Fe(16777215,.2);w.castShadow=!0,w.shadow.mapSize.set(1024,1024),w.shadow.camera.far=15,w.shadow.camera.left=-7,w.shadow.camera.top=7,w.shadow.camera.right=7,w.shadow.camera.bottom=-7,w.position.set(5,5,5),n.add(w);const m={width:window.innerWidth,height:window.innerHeight};window.addEventListener("resize",()=>{m.width=window.innerWidth,m.height=window.innerHeight,g.aspect=m.width/m.height,g.updateProjectionMatrix(),E.setSize(m.width,m.height),E.setPixelRatio(Math.min(window.devicePixelRatio,2))});const g=new _e(75,m.width/m.height,.1,150);g.position.set(-30,30,30),n.add(g);const b=new Ve(g,s);b.enableDamping=!0;const E=new Re({canvas:s,alpha:!0});E.outputColorSpace=qe,E.shadowMap.enabled=!0,E.shadowMap.type=Le,E.setSize(m.width,m.height),E.setPixelRatio(Math.min(window.devicePixelRatio,2));const C=[],A=new je(1,1),I=new qt({metalness:.6,roughness:.2,envMap:o}),R=(x,O)=>{const P=new Rt(A,I);P.scale.set(x,x,x),P.castShadow=!0,P.position.copy(O),n.add(P);const q=new Bt(new c(x/2,x/2,x/2)),V=new N({position:new c(O.x,O.y,O.z),mass:Math.random()*10+1,material:u,linearDamping:.8,angularDamping:.8});V.addShape(q),l.addBody(V),C.push({mesh:P,body:V})},T=new Oe(1),_=new qt({metalness:.3,roughness:.5,envMap:o}),L=(x,O,P=Math.random()*10+1,q={x:0,y:0,z:0})=>{const V=new Rt(T,_);V.scale.set(x,x,x),V.castShadow=!0,V.position.copy(O),n.add(V);const Y=new Ys(x),F=new N({position:new c(O.x,O.y,O.z),mass:P,material:d,linearDamping:.8,angularDamping:.8});F.addShape(Y),F.addEventListener("collide",a),F.applyLocalImpulse(new c(q.x,-q.y,q.z),new c(0,0,0)),l.addBody(F),C.push({mesh:V,body:F})};for(let x=0;x<100;x++)L(.5,{x:(Math.random()-.5)*5,y:Math.random()*15+5,z:(Math.random()-.5)*5}),R(1.5,{x:(Math.random()-.5)*5,y:Math.random()*15+5,z:(Math.random()-.5)*5});const z=new ke;let S=0;const M=()=>{const x=z.getElapsedTime(),O=x-S;S=x;for(const P of C)P.mesh.position.copy(P.body.position),P.mesh.quaternion.copy(P.body.quaternion);l.step(1/60,O,3),b.update(),E.render(n,g),window.requestAnimationFrame(M)};M()}),[]}class Mi extends ze{constructor(t){super(),Ce(this,t,gi,xi,Me,{})}}export{Mi as component};
